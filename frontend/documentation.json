{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "MediaRouterService",
            "id": "injectable-MediaRouterService-3c4cf19a7d20b8620a2b14a06806791a60353ca49de3a501dfb7544027522bb1d6b432040ea8787cbd301a0a2aa094cabdfbe3c2e9adc3d04f7fc96ab4a9872b",
            "file": "src/shared/services/media-router.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openEditPage",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openLibraryPage",
                    "args": [
                        {
                            "name": "type",
                            "type": "LibraryListType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "LibraryListType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMediaPlayer",
                    "args": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMoviePlayer",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSearch",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSeriesPlayer",
                    "args": [
                        {
                            "name": "seriesID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "seriesID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Media } from '../types/media';\r\nimport { Episode } from '../types/seriesEpisode';\r\nimport { MediaService } from './media.service';\r\nimport { LibraryListType } from '../types/libraryListType';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MediaRouterService {\r\n  constructor(\r\n    private router: Router,\r\n    private mediaService: MediaService,\r\n  ) {}\r\n\r\n  public openMediaPlayer(media: Media) {\r\n    let route: string = '';\r\n\r\n    if (media instanceof Episode) route = `/series/${media.seriesID}/player`;\r\n\r\n    if (media.type === 'Series') route = '/series';\r\n\r\n    if (media.type === 'Movie') route = `/movie/player`;\r\n\r\n    this.router.navigate([route, media.id]);\r\n  }\r\n\r\n  public openSeriesPlayer(seriesID: string, id: string) {\r\n    if (seriesID == null) return;\r\n    this.router.navigate([`/series/${seriesID}/player`, id]);\r\n  }\r\n\r\n  public openMoviePlayer(id: string) {\r\n    this.router.navigate(['/movie/player', id]);\r\n  }\r\n\r\n  openSearch(input: string) {\r\n    this.router.navigate(['/search', input]);\r\n  }\r\n\r\n  openEditPage(id: string) {\r\n    this.router.navigate(['/edit', id]);\r\n  }\r\n\r\n  openLibraryPage(type: LibraryListType) {\r\n    this.router.navigate(['/library', type]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MediaService",
            "id": "injectable-MediaService-ee553e265351589677b85274280ac2d27ff93b5e3d6f8cbfb504760f7df47a5cd85fde9a1a7b688f49887fc9702d4cc52155e286ce25600acd5d64bc31f7075f",
            "file": "src/shared/services/media.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpRequestHandler",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentEpisode",
                    "defaultValue": "signal<Episode | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentMedia",
                    "defaultValue": "signal<Media | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentSeason",
                    "defaultValue": "signal<number>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToWatchHistory",
                    "args": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentMedia",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<literal type>>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getEpisode",
                    "args": [
                        {
                            "name": "episodeID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Episode>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "episodeID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHighestRated",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHighestRatedMovies",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Movie[]>>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHighestRatedSeries",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Series[]>>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMedia",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Episode | Movie | Series>>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMediaList",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"series\" | \"movies\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"series\" | \"movies\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovie",
                    "args": [
                        {
                            "name": "movieID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Movie>>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "movieID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomMediaList",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomMovie",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomSeries",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearch",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "genres",
                            "type": "MediaGenre[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genres",
                            "type": "MediaGenre[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeries",
                    "args": [
                        {
                            "name": "seriesID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Series>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "seriesID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSimilarMovies",
                    "args": [
                        {
                            "name": "movieID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Movie[]>>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "movieID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWatchHistory",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<Media[]>>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWatchTime",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<number>>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentMedia",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<boolean>>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "Media",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\nimport { Series } from '../types/series';\r\nimport { Episode } from '../types/seriesEpisode';\r\nimport { Media } from '../types/media';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  CurrentMediaRoutes,\r\n  EpisodeRoutes,\r\n  MediaRoutes,\r\n  MovieRoutes,\r\n  SeriesRoutes,\r\n  WatchHistoryRoutes,\r\n} from '../../utils/apiRoutes';\r\nimport { Observable } from 'rxjs';\r\nimport { BackendResponse } from '../types/response';\r\nimport { CurrentMedia } from '../types/currentMedia';\r\nimport { Movie } from '../types/movie';\r\nimport { MediaGenre } from '../types/genre';\r\nimport { HttpRequestHandler } from '../types/APIMethodService';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MediaService {\r\n  public currentMedia = signal<Media | null>(null);\r\n\r\n  public currentEpisode = signal<Episode | null>(null);\r\n  public currentSeason = signal<number>(1);\r\n\r\n  private apiService!: HttpRequestHandler;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.apiService = new HttpRequestHandler(http);\r\n  }\r\n\r\n  public getMediaList(\r\n    type: 'series' | 'movies'\r\n  ): Observable<BackendResponse<Media[]>> {\r\n    const route =\r\n      type === 'series' ? SeriesRoutes.SERIES_ALL : MovieRoutes.MOVIES;\r\n\r\n    return this.apiService.get(route);\r\n  }\r\n\r\n  public getSeries(seriesID: string): Observable<BackendResponse<Series>> {\r\n    return this.apiService.get(SeriesRoutes.SERIES(seriesID));\r\n  }\r\n\r\n  public getEpisode(episodeID: string): Observable<BackendResponse<Episode>> {\r\n    return this.apiService.get(EpisodeRoutes.Episode(episodeID));\r\n  }\r\n\r\n  public getMovie(movieID: string): Observable<BackendResponse<Movie>> {\r\n    return this.apiService.get(MovieRoutes.MOVIE(movieID));\r\n  }\r\n\r\n  public setCurrentMedia(id: string = '') {\r\n    const path = CurrentMediaRoutes.SET_CURRENT_MEDIA;\r\n    const media = new CurrentMedia({ mediaID: id });\r\n\r\n    this.apiService.post(path, media).subscribe();\r\n  }\r\n\r\n  public getCurrentMedia(): Observable<\r\n    BackendResponse<{ type: string; media: Media }>\r\n  > {\r\n    return this.apiService.get(CurrentMediaRoutes.CURRENT_MEDIA);\r\n  }\r\n\r\n  public getHighestRatedMovies(\r\n    limit: number\r\n  ): Observable<BackendResponse<Movie[]>> {\r\n    return this.apiService.get(MovieRoutes.HIGHEST_RATED(limit));\r\n  }\r\n\r\n  public getHighestRatedSeries(\r\n    limit: number\r\n  ): Observable<BackendResponse<Series[]>> {\r\n    return this.apiService.get(SeriesRoutes.HIGHEST_RATED(limit));\r\n  }\r\n\r\n  public getWatchHistory(limit: number): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.get(WatchHistoryRoutes.GET_HISTORY(limit));\r\n  }\r\n\r\n  public addToWatchHistory(media: Media) {\r\n    this.apiService\r\n      .post(WatchHistoryRoutes.ADD_HISTORY_ITEM(media.id, media.type))\r\n      .subscribe();\r\n  }\r\n\r\n  public getHighestRated(limit: number): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.get(MediaRoutes.HIGHEST_RATED(limit));\r\n  }\r\n\r\n  public getMedia(\r\n    id: string\r\n  ): Observable<BackendResponse<Episode | Movie | Series>> {\r\n    return this.apiService.get(MediaRoutes.MEDIA(id));\r\n  }\r\n\r\n  public getRandomMediaList(\r\n    limit: number\r\n  ): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.get(MediaRoutes.RANDOM_MEDIA_LIST(limit));\r\n  }\r\n\r\n  public getRandomMovie(limit: number): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.get(MovieRoutes.RANDOM(limit));\r\n  }\r\n\r\n  public getRandomSeries(limit: number): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.get(SeriesRoutes.RANDOM(limit));\r\n  }\r\n\r\n  public getSearch(\r\n    input: string,\r\n    genres: MediaGenre[]\r\n  ): Observable<BackendResponse<Media[]>> {\r\n    return this.apiService.post(MediaRoutes.SEARCH(input), genres);\r\n  }\r\n\r\n  public getWatchTime(\r\n    id: string | undefined\r\n  ): Observable<BackendResponse<number>> {\r\n    if (!id) throw new Error('Provided ID is undefined');\r\n    return this.apiService.get(MediaRoutes.GET_TIME_WATCHED(id));\r\n  }\r\n\r\n  public updateData(media: Media): Observable<BackendResponse<boolean>> {\r\n    return this.apiService.put(MediaRoutes.PUT_DATA(media.id), media);\r\n  }\r\n\r\n  public getSimilarMovies(\r\n    movieID: string\r\n  ): Observable<BackendResponse<Movie[]>> {\r\n    return this.apiService.get(MovieRoutes.GET_SIMILAR_MOVIES(movieID));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CurrentMedia",
            "id": "class-CurrentMedia-e6dbdc9246834e82fca9ecd774a8ff680561af52eb02f9f3cc05e99eeb8df99af427d32a68732cb04e80e10dab6e992573f85da4d917f6d19a47fa9737d177c8",
            "file": "src/shared/types/currentMedia.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CurrentMedia {\r\n  mediaID: string;\r\n\r\n  constructor(data: Partial<CurrentMedia>) {\r\n    this.mediaID = data.mediaID ?? '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<CurrentMedia>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<CurrentMedia>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "mediaID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Episode",
            "id": "class-Episode-c23f49e989384b43937cd59cc77793695452a42414ea4657dd7934579c099f61fd754ce49ba0185fe095291f3b8242d22609dde815f30d2308c443c0a69132db",
            "file": "src/shared/types/seriesEpisode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Media } from './media';\r\n\r\nexport class Episode extends Media {\r\n  pathMedia: string | null;\r\n\r\n  season: number;\r\n  episode: number;\r\n\r\n  seriesID: string;\r\n\r\n  override readonly type: string;\r\n\r\n  constructor(data: Partial<Episode>) {\r\n    super(data);\r\n    this.pathMedia = data.pathMedia ?? null;\r\n    this.season = data.season ?? 0;\r\n    this.episode = data.episode ?? 0;\r\n    this.seriesID = data.seriesID ?? '';\r\n    this.type = 'Episode';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Episode>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Episode>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "episode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pathMedia",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "season",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "seriesID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        164,
                        148
                    ],
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "durationWatched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "genreList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaGenre[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "isComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "Media"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Media"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpRequestHandler",
            "id": "class-HttpRequestHandler-8ae7b7144af00636cab70faf8ccbc63feab64c3adf593d0bb0ddade8b971db0ffa166296bf49642f7b2a8303c49b9a8691f77c55bcbe04c16caf1c3f37f37915",
            "file": "src/shared/types/APIMethodService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { BackendResponse } from './response';\r\nimport { map, Observable } from 'rxjs';\r\n\r\nexport class HttpRequestHandler {\r\n  constructor(private http: HttpClient) {\r\n    this.http = http;\r\n  }\r\n\r\n  get<T>(url: string): Observable<BackendResponse<T>> {\r\n    return this.http\r\n      .get<BackendResponse<T>>(url)\r\n      .pipe(HttpRequestHandler.checkBackendResponse<T>());\r\n  }\r\n\r\n  post<T>(url: string, body: unknown = null): Observable<BackendResponse<T>> {\r\n    return this.http\r\n      .post<BackendResponse<T>>(url, body)\r\n      .pipe(HttpRequestHandler.checkBackendResponse<T>());\r\n  }\r\n\r\n  put<T>(\r\n    url: string,\r\n    body: unknown = undefined\r\n  ): Observable<BackendResponse<T>> {\r\n    return this.http\r\n      .put<BackendResponse<T>>(url, body)\r\n      .pipe(HttpRequestHandler.checkBackendResponse<T>());\r\n  }\r\n\r\n  public static checkBackendResponse<T>() {\r\n    return map<BackendResponse<T>, BackendResponse<T>>((response) => {\r\n      if (!response.success || response.error)\r\n        throw new Error(\r\n          response.error ||\r\n            'Error while performing Task: Error message is not defined by backend'\r\n        );\r\n\r\n      return response;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "checkBackendResponse",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BackendResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Media",
            "id": "class-Media-ce89ac12a9f5158a70075aabdf2ee9e4163bf1826ccac320fa4af515718a9443876f43a6fcab8c32a8e465163e2d88b006ca9254411eef4976bf7a397fe271a5",
            "file": "src/shared/types/media.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MediaGenre } from './genre';\r\n\r\nexport abstract class Media {\r\n  id: string = '';\r\n  title: string | null;\r\n  description: string | null;\r\n  genreList: MediaGenre[] | null;\r\n\r\n  isComplete: boolean;\r\n\r\n  rating: number | null;\r\n  watched: boolean;\r\n\r\n  durationWatched: number;\r\n  duration: number;\r\n\r\n  abstract readonly type: string;\r\n\r\n  constructor(data: Partial<Media>) {\r\n    this.id = data.id ?? '';\r\n    this.title = data.title ?? null;\r\n    this.description = data.description ?? null;\r\n    this.genreList = data.genreList ?? null;\r\n    this.rating = data.rating ?? null;\r\n    this.isComplete = data.isComplete ?? true;\r\n    this.watched = data.watched ?? false;\r\n    this.duration = data.duration ?? 0;\r\n    this.durationWatched = data.durationWatched ?? 0;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Media>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Media>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "durationWatched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "genreList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaGenre[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        128,
                        148
                    ]
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Movie",
            "id": "class-Movie-d2f7b78d308a1e2de542ab5cd8db35c3c337f13fbbf0d507f53f0dcd43ed45cf4cc0e855ba444e424d38854f8690e8084d971103fb6f4ce580aa7264a13f2de0",
            "file": "src/shared/types/movie.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Media } from './media';\r\n\r\nexport class Movie extends Media {\r\n  pathMedia: string | null;\r\n\r\n  override readonly type: string;\r\n\r\n  constructor(data: Partial<Movie>) {\r\n    super(data);\r\n    this.pathMedia = data.pathMedia ?? null;\r\n    this.type = 'Movie';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Movie>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Movie>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "pathMedia",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        164,
                        148
                    ],
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "durationWatched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "genreList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaGenre[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "isComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "Media"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Media"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Series",
            "id": "class-Series-d8856bb65ad54fdd6971a40b82d0817333e636009aa603d3108ce89b6f3c6e8a5a7cac3138075a5a664f091f5f381ddd67c67b74b827f67c88797f078018e8a2",
            "file": "src/shared/types/series.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Media } from './media';\r\nimport { Episode } from './seriesEpisode';\r\n\r\nexport class Series extends Media {\r\n  episodeList: Episode[] = [];\r\n\r\n  override readonly type: string;\r\n\r\n  constructor(data: Partial<Series>) {\r\n    super(data);\r\n    this.episodeList = data.episodeList ?? [];\r\n    this.type = 'Series';\r\n  }\r\n\r\n  getSeasons(): number[] {\r\n    return Array.from(new Set(this.episodeList.map((item) => item.season)));\r\n  }\r\n\r\n  getEpisodeArray(): Episode[][] {\r\n    const array: Episode[][] = [];\r\n\r\n    const seasons = Array.from(\r\n      new Set(this.episodeList.map((item) => item.season))\r\n    );\r\n\r\n    seasons.forEach((season) => {\r\n      array.push(\r\n        this.episodeList.filter((episode) => episode.season == season)\r\n      );\r\n    });\r\n\r\n    return array;\r\n  }\r\n\r\n  getFirstEpisodeOfSeason(season: number): Episode {\r\n    const episodeArray = this.getEpisodeArray();\r\n\r\n    return episodeArray[season - 1][0];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "episodeList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Episode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        164,
                        148
                    ],
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "durationWatched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "genreList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaGenre[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "isComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "Media"
                    }
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "Media"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getEpisodeArray",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFirstEpisodeOfSeason",
                    "args": [
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Episode",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeasons",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Media"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WatchHistoryItem",
            "id": "class-WatchHistoryItem-0659e61a45b61ba36c1e873a4ad9a286caa0a78d10311fabbdd9a5b8915b6d6073a6a60e0a4bc726ac4ca998a768d28164f3413d53f51b447c9b388a021215d7",
            "file": "src/shared/types/watchHistory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class WatchHistoryItem {\r\n  // id: string | null;\r\n  type: string;\r\n  time: Date | null;\r\n  id: string | null;\r\n\r\n  constructor(data: Partial<WatchHistoryItem>) {\r\n    this.id = data.id ?? null;\r\n    this.type = data.type ?? '';\r\n    this.time = data.time ?? null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<WatchHistoryItem>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<WatchHistoryItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "OnClickOutsideDirective",
            "id": "directive-OnClickOutsideDirective-62ab6c097b607e84e684fb939c90b3ec1b6f2fc8be8ccd556fcec86e609aa12bd7394f820db73eb99247b0712b27e674cf8bbd7b988a83d2bb876e94a693e9b9",
            "file": "src/shared/directives/on-click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[onClickOutside]',\r\n  standalone: true,\r\n})\r\nexport class OnClickOutsideDirective {\r\n  @Output() onClickOutside = new EventEmitter<void>();\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(targetElement: HTMLElement) {\r\n    const clickedInside = this.elementRef.nativeElement.contains(targetElement);\r\n\r\n    if (!clickedInside) {\r\n      this.onClickOutside.emit();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[onClickOutside]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-56b5748034421015c151f0c4a5fb89114dbd2623c9210e66fa2563c45984973536dfda19c555dfcdd80b9ee37764e14ea4aa509c8ba0332dd21af790c1492a92",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'StreamHub'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NavigationEnd, Router, RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  title = 'StreamHub';\r\n\r\n  constructor(private router: Router) {\r\n    this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationEnd) window.scrollTo(1, 0);\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<router-outlet />\r\n"
        },
        {
            "name": "Banner",
            "id": "component-Banner-acc8f2c53af027c6e29f041b4ab5343ae10a6653d549afb0dbdaa7e12612ebba721cf29558479887a208505861e3c00987548a78c41a551f71b5f516d9bf0d98",
            "file": "src/shared/components/molecules/banner/banner.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "banner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./banner.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "media",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Media | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "seriesInfo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "src",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getMediaAsEpisode",
                    "args": [],
                    "optional": false,
                    "returnType": "Episode | null",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEpisode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playMedia",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BaseButton"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GenreList"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  signal,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\nimport { Media } from '../../../types/media';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { GenreList } from '../genre-list/genre-list';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Series } from '../../../types/series';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\n\r\n@Component({\r\n  selector: 'banner',\r\n  standalone: true,\r\n  imports: [BaseButton, CommonModule, GenreList],\r\n  templateUrl: './banner.html',\r\n  styleUrl: './banner.scss',\r\n})\r\nexport class Banner implements AfterViewInit {\r\n  @Input() media: Media | null = null;\r\n\r\n  public seriesInfo: Series | null = null;\r\n\r\n  @ViewChild('img') img!: ElementRef;\r\n\r\n  public src = signal<string | null>(null);\r\n  @Input() buttonText: string = '';\r\n\r\n  constructor(\r\n    private elRef: ElementRef,\r\n    private mediaRouterService: MediaRouterService,\r\n    private mediaService: MediaService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (!this.media?.id) throw new Error('Media ID not set');\r\n\r\n    const mediaType = this.media.type;\r\n    let type = '';\r\n\r\n    if (mediaType == 'Movie') type = 'movies';\r\n    if (mediaType == 'Series') type = 'series';\r\n    if (mediaType == 'Episode') {\r\n      type = 'episodes';\r\n      if (this.media instanceof Episode) {\r\n        this.mediaService\r\n          .getSeries(this.media.seriesID)\r\n          .subscribe(\r\n            (response) => (this.seriesInfo = new Series(response.data))\r\n          );\r\n      }\r\n    }\r\n    this.src.set(\r\n      `http://localhost:8000/api/${type}/${this.media?.id}/thumbnail_banner`\r\n    );\r\n\r\n    // this.elRef.nativeElement.style.setProperty(\r\n    //   '--thumbnail-path',\r\n    //   `url(\"http://localhost:8000/api/${type}/${this.media?.id}/thumbnail_banner\")`\r\n    // );\r\n  }\r\n\r\n  playMedia() {\r\n    if (this.media == null) return;\r\n\r\n    this.mediaService.currentMedia.set(this.media);\r\n    this.mediaRouterService.openMediaPlayer(this.media);\r\n  }\r\n\r\n  isEpisode(): boolean {\r\n    return this.media instanceof Episode;\r\n  }\r\n\r\n  getMediaAsEpisode(): Episode | null {\r\n    if (this.media instanceof Episode) return new Episode(this.media);\r\n    return null;\r\n  }\r\n}\r\n",
            "styleUrl": "./banner.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div>\r\n  <img class=\"thumbnail\" *ngIf=\"src() !== null\" [src]=\"src()\" />\r\n</div>\r\n\r\n<div class=\"banner__content\">\r\n  <div *ngIf=\"this.media && this.seriesInfo\">\r\n    <p class=\"banner__episode-title\">{{this.seriesInfo.title}}</p>\r\n    <p>\r\n      Season {{this.getMediaAsEpisode()?.season}} Episode\r\n      {{this.getMediaAsEpisode()?.episode}}\r\n    </p>\r\n  </div>\r\n\r\n  <p class=\"banner__series-title\">{{this.media?.title}}</p>\r\n  <p class=\"banner__description\">{{this.media?.description}}</p>\r\n\r\n  <div class=\"banner__group\">\r\n    <base-button (onClick)=\"this.playMedia()\" class=\"banner__button\">\r\n      <p class=\"button__text\">{{this.buttonText}}</p></base-button\r\n    >\r\n\r\n    <genre-list [genres]=\"this.media?.genreList\"></genre-list>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"!this.media?.isComplete\" class=\"circle banner__complete\"></div>\r\n\r\n<div *ngIf=\"this.media?.rating != null\" class=\"banner__rating\">\r\n  <p class=\"prevent-select\">{{this.media?.rating}}</p>\r\n</div>\r\n"
        },
        {
            "name": "BaseButton",
            "id": "component-BaseButton-581392a0b6d2e0033bc5e90a5aa2142941976c399015b5f7b968d431865a59e496ebc82ccffb0224f00d11c0ca2f62cb263842253c543cca3f6d23cceaab2af8",
            "file": "src/shared/components/atoms/base-button/base-button.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "base-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./base-button.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'base-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './base-button.html',\r\n  styleUrl: './base-button.scss',\r\n})\r\nexport class BaseButton {\r\n  @Output() onClick = new EventEmitter<void>();\r\n}\r\n",
            "styleUrl": "./base-button.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button (click)=\"this.onClick.emit()\">\r\n  <ng-content class=\"content\" />\r\n</button>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "EditPage",
            "id": "component-EditPage-e1d0909237d58b21860e7f3138d66ff4e7df0cb0e1aa71925d974aa0375b7019e06e3a250b8c6add8fca06d80c9ea588875d5cbc20dc7a5f4fd6855394e059a6",
            "file": "src/shared/components/pages/edit-page/edit-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "complete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "genreList",
                    "defaultValue": "new Set<MediaGenre>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputComplete'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inputDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputDesc'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inputRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputRating'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inputTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputTitle'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "media",
                    "defaultValue": "signal<Media | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "rating",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addGenresToList",
                    "args": [
                        {
                            "name": "data",
                            "type": "MediaGenre[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MediaGenre[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addGenreToList",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eventName",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRating",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isGenreActive",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancelPressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSavePressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "BaseButton"
                },
                {
                    "name": "Icon"
                },
                {
                    "name": "Genre"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  signal,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\nimport { Icon } from '../../atoms/icon/icon';\r\nimport { MediaGenre } from '../../../types/genre';\r\nimport { Genre } from '../../atoms/genre/genre';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { Movie } from '../../../types/movie';\r\nimport { Series } from '../../../types/series';\r\n\r\n@Component({\r\n  selector: 'edit-page',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, HomeTemplate, BaseButton, Icon, Genre],\r\n  templateUrl: './edit-page.html',\r\n  styleUrl: './edit-page.scss',\r\n})\r\nexport class EditPage {\r\n  @ViewChild('inputTitle') inputTitle!: ElementRef;\r\n  @ViewChild('inputDesc') inputDesc!: ElementRef;\r\n  @ViewChild('inputComplete') inputComplete!: ElementRef;\r\n  @ViewChild('inputRating') inputRating!: ElementRef;\r\n\r\n  public title: string = '';\r\n  public description: string = '';\r\n  public complete: boolean = false;\r\n  public rating: number = 0;\r\n\r\n  private genreList = new Set<MediaGenre>();\r\n\r\n  public media = signal<Media | null>(null);\r\n\r\n  constructor(\r\n    private mediaService: MediaService,\r\n    private activeRoute: ActivatedRoute,\r\n    private location: Location\r\n  ) {\r\n    const id = this.activeRoute.snapshot.paramMap.get('id');\r\n    if (!id) throw new Error('ID is null or undefined expected value');\r\n\r\n    this.mediaService.getMedia(id).subscribe((response) => {\r\n      const data = response.data;\r\n      this.media.set(data);\r\n      this.title = data.title ?? '';\r\n      this.description = data.description ?? '';\r\n      this.complete = data.isComplete;\r\n      this.rating = data.rating ?? 0;\r\n\r\n      if (data.type === 'Episode') {\r\n        this.mediaService.getEpisode(data.id).subscribe((response) => {\r\n          this.mediaService\r\n            .getSeries(response.data.seriesID)\r\n            .subscribe((response) => {\r\n              this.addGenresToList(response.data.genreList);\r\n            });\r\n        });\r\n      } else {\r\n        this.addGenresToList(data.genreList);\r\n      }\r\n    });\r\n  }\r\n\r\n  private addGenresToList(data: MediaGenre[] | null) {\r\n    data?.forEach((genre) => {\r\n      this.genreList.add(genre);\r\n    });\r\n  }\r\n\r\n  onCancelPressed() {\r\n    this.location.back();\r\n  }\r\n\r\n  getRating(): number {\r\n    if (typeof this.rating !== 'number' && isNaN(this.rating)) {\r\n      this.rating = 0;\r\n      return this.rating;\r\n    }\r\n\r\n    if (this.rating < 0) this.rating = 0;\r\n    else if (this.rating > 100) this.rating = 100;\r\n\r\n    return this.rating;\r\n  }\r\n\r\n  onSavePressed() {\r\n    const media = this.media();\r\n    if (!media) throw new Error('Media is null');\r\n\r\n    media.description = this.description;\r\n    media.title = this.title;\r\n    media.rating = this.getRating();\r\n    media.genreList = Array.from(this.genreList);\r\n    media.isComplete = this.complete;\r\n\r\n    this.mediaService.updateData(media).subscribe((response) => {\r\n      if (response.error) throw new Error(response.error);\r\n\r\n      this.location.back();\r\n    });\r\n  }\r\n\r\n  getAllGenres(): string[] {\r\n    return Object.values(MediaGenre);\r\n  }\r\n\r\n  addGenreToList(genre: string) {\r\n    const genreType = genre as MediaGenre;\r\n    if (this.isGenreActive(genre)) this.genreList.delete(genreType);\r\n    else this.genreList.add(genreType);\r\n  }\r\n\r\n  isGenreActive(genre: string): boolean {\r\n    const genreType = genre as MediaGenre;\r\n    return this.genreList.has(genreType);\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  eventName(event: KeyboardEvent) {\r\n    const keyPressed = event.key.toLowerCase();\r\n\r\n    if ((event.ctrlKey || event.metaKey) && keyPressed === 's') {\r\n      event.preventDefault();\r\n      this.onSavePressed();\r\n    }\r\n\r\n    if (keyPressed === 'escape') {\r\n      event.preventDefault();\r\n      this.onCancelPressed();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./edit-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<home-template class=\"container\">\r\n  <div class=\"input-group\">\r\n    <p>Title</p>\r\n    <input\r\n      [(ngModel)]=\"title\"\r\n      type=\"text\"\r\n      placeholder=\"Title\"\r\n      maxlength=\"150\"\r\n      class=\"title\"\r\n    />\r\n\r\n    <p>Desciption</p>\r\n    <textarea\r\n      [(ngModel)]=\"description\"\r\n      type=\"text\"\r\n      placeholder=\"Desciption\"\r\n      maxlength=\"1000\"\r\n      rows=\"8\"\r\n      cols=\"100\"\r\n    ></textarea>\r\n\r\n    <p>Genres</p>\r\n    <div class=\"genre-group\">\r\n      @for (item of this.getAllGenres(); track $index) {\r\n      <genre\r\n        (onClick)=\"this.addGenreToList($event)\"\r\n        class=\"hover-effect\"\r\n        [genre]=\"item\"\r\n        [ngClass]=\"{active: this.isGenreActive(item)}\"\r\n      ></genre>\r\n      }\r\n    </div>\r\n\r\n    <p>Complete</p>\r\n    <input [(ngModel)]=\"complete\" type=\"checkbox\" placeholder=\"Complete\" />\r\n\r\n    <p>Rating</p>\r\n    <input\r\n      class=\"rating\"\r\n      [(ngModel)]=\"rating\"\r\n      type=\"string\"\r\n      min=\"0\"\r\n      max=\"100\"\r\n      maxlength=\"3\"\r\n      (keyup)=\"this.getRating()\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"button-group\">\r\n    <base-button\r\n      title=\"Save Changes\"\r\n      class=\"header__button\"\r\n      (onClick)=\"this.onSavePressed()\"\r\n    >\r\n      <icon iconName=\"save\"></icon>\r\n    </base-button>\r\n\r\n    <base-button\r\n      title=\"Cancel\"\r\n      class=\"header__button\"\r\n      (onClick)=\"this.onCancelPressed()\"\r\n    >\r\n      <icon iconName=\"cancel\"></icon>\r\n    </base-button>\r\n  </div>\r\n</home-template>\r\n"
        },
        {
            "name": "EpisodeCard",
            "id": "component-EpisodeCard-5be1f0959f6078c42436b9e7ce99f0225712ea8b588954aff4290154b2a4079a85866ae81d4fb11bf2d6f1e50bb94ab56db1a638c5a69e9bbc4ab52ce2b7268f",
            "file": "src/shared/components/atoms/episode-card/episode-card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "episode-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./episode-card.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "episode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Episode",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Episode>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "progressBarWidth",
                    "defaultValue": "signal<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "seriesID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "clickButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Icon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  signal,\r\n} from '@angular/core';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Icon } from '../icon/icon';\r\n\r\n@Component({\r\n  selector: 'episode-card',\r\n  standalone: true,\r\n  imports: [CommonModule, Icon],\r\n  templateUrl: './episode-card.html',\r\n  styleUrl: './episode-card.scss',\r\n})\r\nexport class EpisodeCard implements OnInit {\r\n  @Input() episode?: Episode;\r\n  @Input() isSelected: boolean = false;\r\n\r\n  @Output() onClick = new EventEmitter<Episode>();\r\n\r\n  public progressBarWidth = signal<number>(0);\r\n\r\n  seriesID!: string | null;\r\n\r\n  constructor(\r\n    private elRef: ElementRef,\r\n    private mediaRouterService: MediaRouterService,\r\n    private route: ActivatedRoute,\r\n    private mediaService: MediaService\r\n  ) {\r\n    this.seriesID = this.route.snapshot.paramMap.get('seriesID');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.episode?.id) throw new Error('Episode ID not set');\r\n\r\n    this.progressBarWidth.set(\r\n      (this.episode.durationWatched / this.episode.duration) * 100\r\n    );\r\n\r\n    this.elRef.nativeElement.style.setProperty(\r\n      '--thumbnail-path',\r\n      `url(\"http://localhost:8000/api/episodes/${this.episode?.id}/thumbnail_preview\")`\r\n    );\r\n  }\r\n\r\n  clickButton() {\r\n    if (!this.episode) return;\r\n\r\n    this.mediaRouterService.openSeriesPlayer(\r\n      this.seriesID == null ? '' : this.seriesID,\r\n      this.episode.id\r\n    );\r\n\r\n    this.onClick.emit(this.episode);\r\n  }\r\n\r\n  isInProgress(): boolean {\r\n    return this.progressBarWidth() <= 100 && this.progressBarWidth() > 0;\r\n  }\r\n}\r\n",
            "styleUrl": "./episode-card.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  #card\r\n  (click)=\"clickButton()\"\r\n  class=\"card\"\r\n  [ngClass]=\"{'show-info': this.isSelected}\"\r\n>\r\n  <div class=\"content\">\r\n    <div class=\"card__episode\">\r\n      <p class=\"prevent-select card__episode__text\">\r\n        {{this.episode?.episode}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    *ngIf=\"isInProgress()\"\r\n    [ngStyle]=\"{width: this.progressBarWidth() + '%'}\"\r\n    class=\"card__progress\"\r\n  ></div>\r\n\r\n  <div\r\n    *ngIf=\"isInProgress() \"\r\n    class=\"card__progress card__progress__background\"\r\n  ></div>\r\n\r\n  <div class=\"card__watched\" *ngIf=\"this.episode?.watched\">\r\n    <icon class=\"icon--small\" iconName=\"checkmark\" />\r\n  </div>\r\n</div>\r\n\r\n<div class=\"card__content prevent-select\">\r\n  <p class=\"card__title\">{{this.episode?.title}}</p>\r\n</div>\r\n"
        },
        {
            "name": "EpisodeList",
            "id": "component-EpisodeList-321d610544853527108acd7978da07cb0f1d1f92ba9a541b5f9966ab63a67ac652f1a07de3f4b36aa13b7aa39d5d25fa332ea77cf997980b64153b562a7e5d43",
            "file": "src/shared/components/molecules/episode-list/episode-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "episode-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./episode-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "episodeList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Episode[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickCard",
                    "defaultValue": "new EventEmitter<Episode>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentEpisodeID",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "mediaService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickCard",
                    "args": [
                        {
                            "name": "episode",
                            "type": "Episode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "episode",
                            "type": "Episode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "EpisodeCard"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { EpisodeCard } from '../../atoms/episode-card/episode-card';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'episode-list',\r\n  standalone: true,\r\n  imports: [CommonModule, EpisodeCard],\r\n  templateUrl: './episode-list.html',\r\n  styleUrl: './episode-list.scss',\r\n})\r\nexport class EpisodeList {\r\n  @Input() episodeList?: Episode[] | null;\r\n  @Output() onClickCard = new EventEmitter<Episode>();\r\n\r\n  public currentEpisodeID: string = '';\r\n\r\n  constructor(\r\n    public mediaService: MediaService,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.route.paramMap.subscribe((data) => {\r\n      const id = data.get('episodeID');\r\n      if (!id) return;\r\n\r\n      this.currentEpisodeID = id;\r\n    });\r\n  }\r\n\r\n  clickCard(episode: Episode) {\r\n    this.onClickCard.emit(episode);\r\n  }\r\n}\r\n",
            "styleUrl": "./episode-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngFor=\"let episode of episodeList\">\r\n  <div class=\"list__item\">\r\n    <episode-card\r\n      (onClick)=\"this.clickCard($event)\"\r\n      [isSelected]=\"this.currentEpisodeID === episode.id\"\r\n      class=\"mouse-pointer\"\r\n      [episode]=\"episode\"\r\n      [title]=\"episode.title\"\r\n    ></episode-card>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "Genre",
            "id": "component-Genre-d8cc6c39cf083792ed599dff97853e71237a4acac022663e02603f3195f30b3ed18cd250ea9f2040add62f3e4c99496949282144c722c72c30698353ed22f94f",
            "file": "src/shared/components/atoms/genre/genre.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "genre",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./genre.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "genre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onGenreClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'genre',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './genre.html',\r\n  styleUrl: './genre.scss',\r\n})\r\nexport class Genre {\r\n  @Input() genre?: string;\r\n\r\n  @Output() onClick = new EventEmitter<string>();\r\n\r\n  onGenreClicked() {\r\n    if (!this.genre)\r\n      throw new Error('onGenreClicked not triggered: this.genre is undefined');\r\n\r\n    this.onClick.emit(this.genre);\r\n  }\r\n}\r\n",
            "styleUrl": "./genre.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p (click)=\"this.onGenreClicked()\" class=\"prevent-select genre__text\">\r\n  {{this.genre}}\r\n</p>\r\n"
        },
        {
            "name": "GenreList",
            "id": "component-GenreList-af76c56612a3a15d9eaf933754f3fb255da3bc9370a0e86a520b6cce27ade80d29271b43ce6978e499f16725aa228e1b4aadcb9ea3efcb85e0acbc9d8a5fe2d6",
            "file": "src/shared/components/molecules/genre-list/genre-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "genre-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./genre-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string[] | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "Genre"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Genre } from '../../atoms/genre/genre';\r\n\r\n@Component({\r\n  selector: 'genre-list',\r\n  standalone: true,\r\n  imports: [Genre],\r\n  templateUrl: './genre-list.html',\r\n  styleUrl: './genre-list.scss',\r\n})\r\nexport class GenreList {\r\n  @Input() genres: string[] | undefined | null;\r\n}\r\n",
            "styleUrl": "./genre-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (genre of this.genres; track $index) {\r\n<genre [genre]=\"genre\"></genre>\r\n}\r\n"
        },
        {
            "name": "HeaderBar",
            "id": "component-HeaderBar-9e794de1e6f9f336d8262e1987cd85d9ebf17e68758a4590066a2b6e16f58cfc98dd5f2a0b42a86b2189f3064cc2681560cef14bab8bd53965249b3612dc1129",
            "file": "src/shared/components/organisms/header-bar/header-bar.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "header-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header-bar.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mediaID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "showEditButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onEditButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSearch",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BaseButton"
                },
                {
                    "name": "Icon"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\nimport { Icon } from '../../atoms/icon/icon';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'header-bar',\r\n  standalone: true,\r\n  imports: [CommonModule, BaseButton, Icon, RouterLink, RouterLinkActive],\r\n  templateUrl: './header-bar.html',\r\n  styleUrl: './header-bar.scss',\r\n})\r\nexport class HeaderBar {\r\n  @ViewChild('input') input!: ElementRef;\r\n  @Input() showSearch: boolean = false;\r\n  @Input() showEditButton: boolean = false;\r\n  @Input() mediaID: string | undefined;\r\n\r\n  constructor(private mediaRouter: MediaRouterService) {}\r\n\r\n  openSearch(input: string) {\r\n    this.mediaRouter.openSearch(input);\r\n  }\r\n\r\n  onEditButtonClicked() {\r\n    if (!this.mediaID) throw new Error('mediaID is null');\r\n    this.mediaRouter.openEditPage(this.mediaID);\r\n  }\r\n}\r\n",
            "styleUrl": "./header-bar.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaRouter",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "mediaRouter",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"button-group button-group__router\">\r\n  <base-button\r\n    routerLink=\"/\"\r\n    routerLinkActive=\"active\"\r\n    ariaCurrentWhenActive=\"page\"\r\n    class=\"header__button\"\r\n  >\r\n    <p class=\"button__text\">Home</p>\r\n  </base-button>\r\n\r\n  <base-button\r\n    routerLink=\"/movies\"\r\n    routerLinkActive=\"active\"\r\n    ariaCurrentWhenActive=\"page\"\r\n    class=\"header__button\"\r\n  >\r\n    <p class=\"button__text\">Movies</p>\r\n  </base-button>\r\n\r\n  <base-button\r\n    routerLink=\"/series\"\r\n    routerLinkActive=\"active\"\r\n    ariaCurrentWhenActive=\"page\"\r\n    class=\"header__button\"\r\n  >\r\n    <p class=\"button__text\">Series</p>\r\n  </base-button>\r\n\r\n  <ng-container *ngIf=\"showEditButton\">\r\n    <base-button (onClick)=\"this.onEditButtonClicked()\" class=\"header__icon\">\r\n      <icon iconName=\"edit\" alt=\"Edit\" />\r\n    </base-button>\r\n  </ng-container>\r\n\r\n  <div\r\n    [ngClass]=\"{'margin-left': !showEditButton}\"\r\n    class=\"search\"\r\n    *ngIf=\"showSearch\"\r\n  >\r\n    <base-button (onClick)=\"this.openSearch(input.value)\" class=\"header__icon\">\r\n      <icon iconName=\"search\" alt=\"Search\" />\r\n    </base-button>\r\n\r\n    <input\r\n      (keydown.enter)=\"this.openSearch(input.value)\"\r\n      class=\"input\"\r\n      type=\"text\"\r\n      #input\r\n      placeholder=\"Search...\"\r\n      maxlength=\"100\"\r\n    />\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomePage",
            "id": "component-HomePage-d26ddacc9c83b8768163a6de45d1dfb813bb4d624a9ab9c181f270e058b9a835d498efc9358107111c6cb7e016a7de78ab0d19c5c3b4aaf19de3923ead0c6e7d",
            "file": "src/shared/components/pages/home-page/home-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentMedia",
                    "defaultValue": "signal<Media | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "highestRatedList",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "mediaList",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "watchHistory",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setHighestRated",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setMediaList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setWatchHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAllHighestRated",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAllMoviesSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAllRecWatched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "Banner"
                },
                {
                    "name": "MediaCardList"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, signal } from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { Banner } from '../../molecules/banner/banner';\r\nimport { MediaCardList } from '../../molecules/media-card-list/media-card-list';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { Movie } from '../../../types/movie';\r\nimport { Series } from '../../../types/series';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\n\r\n@Component({\r\n  selector: 'home-page',\r\n  standalone: true,\r\n  imports: [HomeTemplate, Banner, MediaCardList, CommonModule],\r\n  templateUrl: './home-page.html',\r\n  styleUrl: './home-page.scss',\r\n})\r\nexport class HomePage implements OnInit {\r\n  public currentMedia = signal<Media | null>(null);\r\n\r\n  public highestRatedList = signal<Media[] | null>(null);\r\n  public watchHistory = signal<Media[] | null>(null);\r\n  public mediaList = signal<Media[] | null>(null);\r\n\r\n  constructor(\r\n    private mediaService: MediaService,\r\n    private mediaRouter: MediaRouterService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.mediaService.getCurrentMedia().subscribe((response) => {\r\n      const data = response.data;\r\n      if (data === null) return;\r\n\r\n      const mediaType = data.type;\r\n      const media = response.data.media;\r\n\r\n      if (media === null) return;\r\n\r\n      if (mediaType == 'episode') this.currentMedia.set(new Episode(media));\r\n      if (mediaType == 'movie') this.currentMedia.set(new Movie(media));\r\n\r\n      console.log('CurrentMedia', this.currentMedia());\r\n    });\r\n\r\n    this.setHighestRated();\r\n    this.setWatchHistory();\r\n    this.setMediaList();\r\n  }\r\n\r\n  private setHighestRated() {\r\n    const mediaList: Media[] = [];\r\n\r\n    this.mediaService.getHighestRated(10).subscribe((response) => {\r\n      response.data.slice(0, 15).forEach((item) => {\r\n        if (item.type == 'Movie') mediaList.push(new Movie(item));\r\n        if (item.type == 'Series') mediaList.push(new Series(item));\r\n      });\r\n\r\n      this.highestRatedList.set(mediaList);\r\n    });\r\n  }\r\n\r\n  private setWatchHistory() {\r\n    const mediaList: Media[] = [];\r\n\r\n    this.mediaService.getWatchHistory(20).subscribe((response) => {\r\n      response.data.slice(0, 15).forEach((item) => {\r\n        if (item.type == 'Movie') mediaList.push(new Movie(item));\r\n        if (item.type == 'Episode') mediaList.push(new Episode(item));\r\n      });\r\n\r\n      this.watchHistory.set(mediaList);\r\n      console.log(this.watchHistory());\r\n    });\r\n  }\r\n\r\n  private setMediaList() {\r\n    const mediaList: Media[] = [];\r\n\r\n    this.mediaService.getRandomMediaList(20).subscribe((response) => {\r\n      response.data.slice(0, 15).forEach((item) => {\r\n        if (item.type == 'Movie') mediaList.push(new Movie(item));\r\n        if (item.type == 'Series') mediaList.push(new Series(item));\r\n      });\r\n\r\n      this.mediaList.set(mediaList);\r\n    });\r\n  }\r\n\r\n  showAllRecWatched() {\r\n    this.mediaRouter.openLibraryPage('recWatched');\r\n  }\r\n\r\n  showAllHighestRated() {\r\n    this.mediaRouter.openLibraryPage('highRated');\r\n  }\r\n\r\n  showAllMoviesSeries() {\r\n    this.mediaRouter.openLibraryPage('moviesSeries');\r\n  }\r\n}\r\n",
            "styleUrl": "./home-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouter",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouter",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<home-template>\r\n  <banner\r\n    [buttonText]=\"'Continue ' + this.currentMedia()?.type\"\r\n    *ngIf=\"this.currentMedia()\"\r\n    [media]=\"this.currentMedia()\"\r\n  ></banner>\r\n\r\n  <media-card-list\r\n    (onShowAllClicked)=\"this.showAllRecWatched()\"\r\n    class=\"list\"\r\n    *ngIf=\"this.watchHistory() != null && this.watchHistory()?.length != 0\"\r\n    [mediaList]=\"this.watchHistory()\"\r\n    mediaListTitle=\"Recently Watched\"\r\n  ></media-card-list>\r\n\r\n  <media-card-list\r\n    (onShowAllClicked)=\"this.showAllHighestRated()\"\r\n    class=\"list\"\r\n    *ngIf=\"this.highestRatedList()\"\r\n    [mediaList]=\"this.highestRatedList()\"\r\n    mediaListTitle=\"Highest Rated\"\r\n  ></media-card-list>\r\n\r\n  <media-card-list\r\n    (onShowAllClicked)=\"this.showAllMoviesSeries()\"\r\n    class=\"list\"\r\n    *ngIf=\"this.mediaList()\"\r\n    [mediaList]=\"this.mediaList()\"\r\n    mediaListTitle=\"Movies / Series\"\r\n  ></media-card-list>\r\n</home-template>\r\n"
        },
        {
            "name": "HomeTemplate",
            "id": "component-HomeTemplate-fbd0cc90bfbe5a7ab6ac160d30f7175ba1767c23f65bdb0bbe7c085e52b50dec499d644a46edd38950c2fa016c99244317691368daf60f6725d35519091587e5",
            "file": "src/shared/components/templates/home-template/home-template.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-template.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mediaID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "showEditButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderBar"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { HeaderBar } from '../../organisms/header-bar/header-bar';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'home-template',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderBar],\r\n  templateUrl: './home-template.html',\r\n  styleUrl: './home-template.scss',\r\n})\r\nexport class HomeTemplate {\r\n  @Input() showSearch: boolean = true;\r\n  @Input() showEditButton: boolean = false;\r\n  @Input() mediaID: string | undefined;\r\n}\r\n",
            "styleUrl": "./home-template.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header-bar\r\n  [showEditButton]=\"showEditButton\"\r\n  [showSearch]=\"this.showSearch\"\r\n  [mediaID]=\"this.mediaID\"\r\n></header-bar>\r\n\r\n<ng-content></ng-content>\r\n"
        },
        {
            "name": "Icon",
            "id": "component-Icon-22fc082d1f8fc8979958e067c4dfc2fb2b1b3bee169fd1a07ce61fc003593bb60bca93538e2d18c5351ffa4e00880a0c2e18b1e4a2125b99c8c51f9308e2b60e",
            "file": "src/shared/components/atoms/icon/icon.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'icon',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './icon.html',\r\n  styleUrl: './icon.scss',\r\n})\r\nexport class Icon {\r\n  @Input() iconName: string = '';\r\n  @Input() alt: string = '';\r\n}\r\n",
            "styleUrl": "./icon.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<img\r\n  draggable=\"false\"\r\n  class=\"icon\"\r\n  [src]=\"'/icons/' + this.iconName + '.svg'\"\r\n  [alt]=\"this.alt\"\r\n/>\r\n"
        },
        {
            "name": "MediaCard",
            "id": "component-MediaCard-3c00cdf4585fe45977e29e0b8ed0e83a3d6450f9ac757142d0de4c319ab6a4f03035b376c7843833266428dc54702531e3ef2b4e810d207ef64d0912cad9737d",
            "file": "src/shared/components/atoms/media-card/media-card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "media-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./media-card.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "media",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Media | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBarWidth",
                    "defaultValue": "signal<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isInProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setThumbnailPath",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateProgressBar",
                    "args": [
                        {
                            "name": "durationWatched",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "durationWatched",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Icon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  signal,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { Media } from '../../../types/media';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Icon } from '../icon/icon';\r\n\r\n@Component({\r\n  selector: 'media-card',\r\n  standalone: true,\r\n  imports: [CommonModule, Icon],\r\n  templateUrl: './media-card.html',\r\n  styleUrl: './media-card.scss',\r\n})\r\nexport class MediaCard implements OnChanges {\r\n  @Input() media: Media | null = null;\r\n\r\n  public progressBarWidth = signal<number>(0);\r\n  @Input() isSelected: boolean = false;\r\n\r\n  constructor(\r\n    private elRef: ElementRef,\r\n    private mediaRouterService: MediaRouterService,\r\n    private mediaService: MediaService\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['media']) this.setThumbnailPath();\r\n  }\r\n\r\n  private setThumbnailPath() {\r\n    if (!this.media?.id) throw new Error('Media ID not set');\r\n\r\n    let mediaType: 'movies' | 'series' | 'episodes' = 'series';\r\n\r\n    if (this.media.type === 'Movie') mediaType = 'movies';\r\n\r\n    if (this.media.type === 'Episode') mediaType = 'episodes';\r\n\r\n    this.updateProgressBar(this.media.durationWatched, this.media.duration);\r\n\r\n    this.elRef.nativeElement.style.setProperty(\r\n      '--thumbnail-path',\r\n      `url(\"http://localhost:8000/api/${mediaType}/${this.media?.id}/thumbnail_preview\")`\r\n    );\r\n  }\r\n\r\n  private updateProgressBar(durationWatched: number, duration: number) {\r\n    this.progressBarWidth.set((durationWatched / duration) * 100);\r\n  }\r\n\r\n  openPlayer() {\r\n    if (!this.media) throw new Error('Media not set');\r\n\r\n    this.mediaService.currentMedia.set(this.media);\r\n    this.mediaRouterService.openMediaPlayer(this.media);\r\n  }\r\n\r\n  isInProgress(): boolean {\r\n    return this.progressBarWidth() < 100 && this.progressBarWidth() > 0;\r\n  }\r\n}\r\n",
            "styleUrl": "./media-card.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\r\n  [ngClass]=\"{selected: isSelected}\"\r\n  (click)=\"this.openPlayer()\"\r\n  class=\"card__thumbnail mouse-pointer\"\r\n>\r\n  <div class=\"content\">\r\n    <div class=\"card__thumbnail__container\">\r\n      <div *ngIf=\"this.media?.rating != null\" class=\"card__rating\">\r\n        <p class=\"prevent-select\">{{this.media?.rating}}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card__media-type\">\r\n      <p class=\"prevent-select\">{{this.media?.type}}</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"!this.media?.isComplete\" class=\"card__complete circle\"></div>\r\n\r\n    <div\r\n      *ngIf=\"isInProgress()\"\r\n      [ngStyle]=\"{width: this.progressBarWidth() + '%'}\"\r\n      class=\"card__progress\"\r\n    ></div>\r\n\r\n    <div\r\n      *ngIf=\"isInProgress() \"\r\n      class=\"card__progress card__progress__background\"\r\n    ></div>\r\n\r\n    <div class=\"card__watched\" *ngIf=\"this.media?.watched\">\r\n      <icon class=\"icon--small\" iconName=\"checkmark\" />\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"card__content\">\r\n  <p class=\"card__title\">{{this.media?.title}}</p>\r\n</div>\r\n"
        },
        {
            "name": "MediaCardList",
            "id": "component-MediaCardList-97cb34060838664316cc73360adb4f1f0151b0f3a5600fc0aca66ca68404dd61740d3d6451fb550381c0431f4a378e8869dd04c43b444bfd1dfc68156c975cfb",
            "file": "src/shared/components/molecules/media-card-list/media-card-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "media-card-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./media-card-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mediaList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Media[] | null",
                    "decorators": []
                },
                {
                    "name": "mediaListTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onShowAllClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "showAllClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MediaCard"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BaseButton"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaCard } from '../../atoms/media-card/media-card';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\n\r\n@Component({\r\n  selector: 'media-card-list',\r\n  standalone: true,\r\n  imports: [MediaCard, CommonModule, BaseButton],\r\n  templateUrl: './media-card-list.html',\r\n  styleUrl: './media-card-list.scss',\r\n})\r\nexport class MediaCardList {\r\n  @Input() mediaList: Media[] | null = null;\r\n  @Input() mediaListTitle: string = '';\r\n\r\n  @Output() public onShowAllClicked = new EventEmitter<void>();\r\n\r\n  showAllClicked() {\r\n    this.onShowAllClicked.emit();\r\n  }\r\n}\r\n",
            "styleUrl": "./media-card-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p class=\"media-list__title\">{{this.mediaListTitle}}</p>\r\n\r\n<div class=\"media-list\">\r\n  @for (media of this.mediaList; track $index) {\r\n  <media-card [title]=\"media.title\" [media]=\"media\"></media-card>\r\n  }\r\n\r\n  <base-button\r\n    *ngIf=\"this.onShowAllClicked.observed\"\r\n    (onClick)=\"this.showAllClicked()\"\r\n    class=\"media-list__button\"\r\n  >\r\n    <p>Show All</p>\r\n  </base-button>\r\n</div>\r\n"
        },
        {
            "name": "MediaLibrary",
            "id": "component-MediaLibrary-e18b95e68493027ca1532c6052cc89264e7475b931e9a34c9ab686fc8656219240e733ee8d353d8d5f508dd3bd390417284c0984b4c3e564cbeb5b71ec805479",
            "file": "src/shared/components/pages/media-library/media-library.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "media-library",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./media-library.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "media",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setMedia",
                    "args": [
                        {
                            "name": "media",
                            "type": "Media[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "Media[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "MediaCardList"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaCardList } from '../../molecules/media-card-list/media-card-list';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { Series } from '../../../types/series';\r\nimport { Movie } from '../../../types/movie';\r\n\r\n@Component({\r\n  selector: 'media-library',\r\n  standalone: true,\r\n  imports: [HomeTemplate, MediaCardList],\r\n  templateUrl: './media-library.html',\r\n  styleUrl: './media-library.scss',\r\n})\r\nexport class MediaLibrary {\r\n  public media = signal<Media[] | null>(null);\r\n\r\n  constructor(\r\n    private mediaService: MediaService,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.route.paramMap.subscribe((param) => {\r\n      const type = param.get('type');\r\n\r\n      switch (type) {\r\n        case 'highRated':\r\n          this.mediaService\r\n            .getHighestRated(0)\r\n            .subscribe((response) => this.setMedia(response.data));\r\n          break;\r\n\r\n        case 'movies':\r\n          this.mediaService\r\n            .getRandomMovie(0)\r\n            .subscribe((response) => this.setMedia(response.data));\r\n          break;\r\n\r\n        case 'moviesSeries':\r\n          this.mediaService\r\n            .getRandomMediaList(0)\r\n            .subscribe((response) => this.setMedia(response.data));\r\n          break;\r\n\r\n        case 'recWatched':\r\n          this.mediaService\r\n            .getWatchHistory(0)\r\n            .subscribe((response) => this.setMedia(response.data));\r\n          break;\r\n\r\n        case 'series':\r\n          this.mediaService\r\n            .getRandomSeries(0)\r\n            .subscribe((response) => this.setMedia(response.data));\r\n          break;\r\n\r\n        default:\r\n          throw new Error('Type does not Exist: ' + type);\r\n      }\r\n    });\r\n  }\r\n\r\n  private setMedia(media: Media[]) {\r\n    this.media.set(\r\n      media.map((media) => {\r\n        if (media.type === 'Episode') return new Episode(media);\r\n        if (media.type === 'Movie') return new Movie(media);\r\n        return new Series(media);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "styleUrl": "./media-library.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<home-template>\r\n  <media-card-list class=\"grid\" [mediaList]=\"this.media()\"> </media-card-list>\r\n</home-template>\r\n"
        },
        {
            "name": "MediaPage",
            "id": "component-MediaPage-3a0c4e28c3bd96dfa44c1b41973e30fb048eec185bbca61ec2aace7a948c62d8617d44c266f42fb9ea139d84b8d360508346441150b56e96d13d479c5e725f09",
            "file": "src/shared/components/pages/media-page/media-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "media-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./media-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "media",
                    "defaultValue": "signal<Media | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "mediaList",
                    "defaultValue": "signal<Media[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"series\" | \"movies\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showAllMedia",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMediaList",
                    "args": [
                        {
                            "name": "mediaList",
                            "type": "Media[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"series\" | \"movies\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'series'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mediaList",
                            "type": "Media[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"series\" | \"movies\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'series'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "Banner"
                },
                {
                    "name": "MediaCardList"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { Banner } from '../../molecules/banner/banner';\r\nimport { MediaCardList } from '../../molecules/media-card-list/media-card-list';\r\nimport { Media } from '../../../types/media';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Series } from '../../../types/series';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Movie } from '../../../types/movie';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\n\r\n@Component({\r\n  selector: 'media-page',\r\n  standalone: true,\r\n  imports: [HomeTemplate, Banner, MediaCardList, CommonModule],\r\n  templateUrl: './media-page.html',\r\n  styleUrl: './media-page.scss',\r\n})\r\nexport class MediaPage {\r\n  public mediaList = signal<Media[]>([]);\r\n  public media = signal<Media | null>(null);\r\n\r\n  private type!: 'series' | 'movies';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private mediaService: MediaService,\r\n    private mediaRouteService: MediaRouterService\r\n  ) {\r\n    this.route.data.subscribe((data) => {\r\n      this.type = data['type'];\r\n\r\n      if (!this.type) throw new Error('Type is not defined');\r\n\r\n      if (this.type === 'series') {\r\n        this.mediaService\r\n          .getRandomSeries(1)\r\n          .subscribe((response) => this.media.set(response.data[0]));\r\n\r\n        this.mediaService.getRandomSeries(15).subscribe((response) => {\r\n          if (!response.success) throw new Error(response.error);\r\n\r\n          this.updateMediaList(response.data, this.type);\r\n        });\r\n      } else if (this.type === 'movies') {\r\n        this.mediaService\r\n          .getRandomMovie(1)\r\n          .subscribe((response) => this.media.set(response.data[0]));\r\n\r\n        this.mediaService.getRandomMovie(15).subscribe((response) => {\r\n          if (!response.success) throw new Error(response.error);\r\n\r\n          this.updateMediaList(response.data, this.type);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMediaList(mediaList: Media[], type: 'series' | 'movies' = 'series') {\r\n    const help = mediaList.map((media) => {\r\n      if (type === 'series') return new Series(media);\r\n      if (type === 'movies') return new Movie(media);\r\n      throw new Error('Type does not exist: ' + type);\r\n    });\r\n\r\n    this.mediaList.set(help);\r\n  }\r\n\r\n  showAllMedia() {\r\n    this.mediaRouteService.openLibraryPage(this.type);\r\n  }\r\n}\r\n",
            "styleUrl": "./media-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouteService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouteService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<home-template>\r\n  <banner\r\n    buttonText=\"Watch\"\r\n    *ngIf=\"this.media() != null\"\r\n    [media]=\"this.media()\"\r\n  ></banner>\r\n\r\n  <media-card-list\r\n    (onShowAllClicked)=\"this.showAllMedia()\"\r\n    class=\"list\"\r\n    [mediaList]=\"this.mediaList()\"\r\n  ></media-card-list>\r\n</home-template>\r\n"
        },
        {
            "name": "MediaTemplate",
            "id": "component-MediaTemplate-e57a6605656fcbee80a2b11c440276f63a92acfc3575451d82f1107ec464bee6c52656323a1d3d7ad09c022b2c4255f823f110284e51b832d43ac16d1e90c003",
            "file": "src/shared/components/templates/media-template/media-template.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "media-template",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./media-template.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "media",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Media | null",
                    "decorators": []
                },
                {
                    "name": "videoSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPlaying",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "routeSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLVideoElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'video', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeUnload",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPauseVideo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayVideo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "seek",
                    "args": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stepFrame",
                    "args": [
                        {
                            "name": "direction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49
                },
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110
                }
            ],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MediaRoutes } from '../../../../utils/apiRoutes';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'media-template',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './media-template.html',\r\n  styleUrl: './media-template.scss',\r\n})\r\nexport class MediaTemplate implements OnInit, OnDestroy {\r\n  @Input() videoSource?: string;\r\n  @Input() media: Media | null = null;\r\n\r\n  @ViewChild('video', { static: true }) video?: ElementRef<HTMLVideoElement>;\r\n\r\n  isPlaying = false;\r\n\r\n  routeSub!: Subscription;\r\n\r\n  constructor(\r\n    private mediaService: MediaService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.routeSub.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.routeSub = this.route.params.subscribe(() => {\r\n      this.onPauseVideo();\r\n    });\r\n  }\r\n\r\n  @HostListener('window:beforeunload', ['$event'])\r\n  beforeUnload() {\r\n    this.onPauseVideo();\r\n    return true;\r\n  }\r\n\r\n  onPauseVideo() {\r\n    const time = this.video?.nativeElement.currentTime;\r\n    const id = this.media?.id;\r\n    if (id && time)\r\n      navigator.sendBeacon(MediaRoutes.SET_TIME_WATCHED(id, Math.floor(time)));\r\n  }\r\n\r\n  onPlayVideo() {\r\n    if (!this.media) return;\r\n    this.mediaService.addToWatchHistory(this.media);\r\n    this.mediaService.setCurrentMedia(this.media.id);\r\n  }\r\n\r\n  onLoadMetadata() {\r\n    this.mediaService.getWatchTime(this.media?.id)?.subscribe((response) => {\r\n      if (this.video) this.video.nativeElement.currentTime = response.data;\r\n    });\r\n  }\r\n\r\n  togglePlay(): void {\r\n    if (this.video) {\r\n      if (this.isPlaying) {\r\n        this.video.nativeElement.pause();\r\n      } else {\r\n        this.video.nativeElement.play();\r\n      }\r\n      this.isPlaying = !this.isPlaying;\r\n    }\r\n  }\r\n\r\n  toggleFullscreen(): void {\r\n    const video = this.video?.nativeElement;\r\n    if (!video) return;\r\n\r\n    if (document.fullscreenElement) {\r\n      document.exitFullscreen();\r\n    } else {\r\n      video.requestFullscreen();\r\n    }\r\n  }\r\n\r\n  stepFrame(direction: number) {\r\n    const video = this.video?.nativeElement;\r\n    if (!video) return;\r\n    if (!video.paused) video.pause();\r\n    const frameTime = 1 / 23.98;\r\n    video.currentTime += direction * frameTime;\r\n  }\r\n\r\n  seek(seconds: number) {\r\n    const video = this.video?.nativeElement;\r\n    if (!video) return;\r\n    video.currentTime += seconds;\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n    const tag = target.tagName.toLowerCase();\r\n\r\n    if (tag === 'input' || tag === 'textarea' || target.isContentEditable)\r\n      return;\r\n\r\n    switch (event.key) {\r\n      case 'MediaPlayPause':\r\n      case ' ':\r\n        event.preventDefault();\r\n        this.togglePlay();\r\n        break;\r\n      case 'ArrowRight':\r\n        event.preventDefault();\r\n        this.seek(5);\r\n        break;\r\n      case 'ArrowLeft':\r\n        event.preventDefault();\r\n        this.seek(-5);\r\n        break;\r\n      case 'f':\r\n        event.preventDefault();\r\n        this.toggleFullscreen();\r\n        break;\r\n      case ',':\r\n        event.preventDefault();\r\n        this.stepFrame(-1);\r\n        break;\r\n      case '.':\r\n        event.preventDefault();\r\n        this.stepFrame(1);\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./media-template.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-content select=\"[header]\"></ng-content>\r\n\r\n<video\r\n  #video\r\n  controls\r\n  class=\"videoPlayer\"\r\n  [src]=\"this.videoSource\"\r\n  type=\"video/mp4\"\r\n  (pause)=\"this.onPauseVideo()\"\r\n  (loadedmetadata)=\"this.onLoadMetadata()\"\r\n  (play)=\"this.onPlayVideo()\"\r\n></video>\r\n\r\n<div class=\"info\">\r\n  <ng-content select=\"[info]\"></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "MoviePage",
            "id": "component-MoviePage-ed196ec88311a6f5a5584070a3e7e447244df37134908fe842bde6830485773e6e9f8a6943b41c49af352364cc4aace1e7ca49914f925b0fca2c858f08dfed9c",
            "file": "src/shared/components/pages/movie-page/movie-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "movie-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./movie-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentMovie",
                    "defaultValue": "signal<Media | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "mediaService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "similarMovies",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subscribtion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displaySimilarMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVideoSource",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSimilarMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MediaTemplate"
                },
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "GenreList"
                },
                {
                    "name": "MediaCard"
                },
                {
                    "name": "MediaCardList"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MediaTemplate } from '../../templates/media-template/media-template';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { Media } from '../../../types/media';\r\nimport { GenreList } from '../../molecules/genre-list/genre-list';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CurrentMediaRoutes } from '../../../../utils/apiRoutes';\r\nimport { Movie } from '../../../types/movie';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { MediaCard } from '../../atoms/media-card/media-card';\r\nimport { MediaCardList } from '../../molecules/media-card-list/media-card-list';\r\n\r\n@Component({\r\n  selector: 'movie-page',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MediaTemplate,\r\n    HomeTemplate,\r\n    GenreList,\r\n    MediaCard,\r\n    MediaCardList,\r\n  ],\r\n  templateUrl: './movie-page.html',\r\n  styleUrl: './movie-page.scss',\r\n})\r\nexport class MoviePage implements OnInit, OnDestroy {\r\n  currentMovie = signal<Media | null>(null);\r\n  similarMovies = signal<Media[] | null>(null);\r\n\r\n  private subscribtion!: Subscription;\r\n\r\n  constructor(\r\n    public mediaService: MediaService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscribtion.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscribtion = this.route.paramMap.subscribe((data) => {\r\n      if (data === null) return;\r\n      const movieID = data.get('id');\r\n      if (movieID === null) throw new Error('No Movie ID specified');\r\n\r\n      this.mediaService.getMovie(movieID).subscribe((response) => {\r\n        this.currentMovie.set(new Movie(response.data));\r\n        this.setSimilarMovies();\r\n      });\r\n    });\r\n  }\r\n\r\n  getVideoSource(): string {\r\n    const movieID = this.route.snapshot.paramMap.get('id');\r\n\r\n    if (!movieID) return '';\r\n\r\n    return CurrentMediaRoutes.GET_VIDEO(movieID);\r\n  }\r\n\r\n  setSimilarMovies() {\r\n    const movie = this.currentMovie();\r\n    if (!movie) throw new Error('No Movie specified');\r\n\r\n    this.mediaService.getSimilarMovies(movie.id).subscribe((response) => {\r\n      this.similarMovies.set(response.data);\r\n    });\r\n  }\r\n\r\n  displaySimilarMovies(): boolean {\r\n    const similarMovies = this.similarMovies();\r\n\r\n    if (similarMovies?.length === 1)\r\n      return similarMovies[0].id !== this.currentMovie()?.id;\r\n\r\n    return similarMovies !== null && similarMovies.length > 0;\r\n  }\r\n}\r\n",
            "styleUrl": "./movie-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<home-template\r\n  *ngIf=\"this.currentMovie() !== null\"\r\n  [mediaID]=\"this.currentMovie()!.id\"\r\n  [showEditButton]=\"true\"\r\n>\r\n  <media-template\r\n    *ngIf=\"this.currentMovie() != null\"\r\n    [media]=\"this.currentMovie()\"\r\n    [videoSource]=\"getVideoSource()\"\r\n  >\r\n    <div class=\"movie movie__title\" header>\r\n      <p>{{this.currentMovie()?.title}}</p>\r\n    </div>\r\n\r\n    <div class=\"movie__info\" info>\r\n      <div class=\"movie\">\r\n        <genre-list [genres]=\"this.currentMovie()?.genreList\"></genre-list>\r\n        <p class=\"prevent-select rating\">{{this.currentMovie()?.rating}}</p>\r\n      </div>\r\n\r\n      <div class=\"movie movie__description\">\r\n        <p>{{this.currentMovie()?.description}}</p>\r\n      </div>\r\n\r\n      <div class=\"movie__others\" *ngIf=\"displaySimilarMovies()\">\r\n        <p class=\"media-list__title\">Similar Movies</p>\r\n\r\n        <div class=\"media-list\">\r\n          @for (media of this.similarMovies(); track $index) {\r\n          <media-card\r\n            [isSelected]=\"media.id === this.currentMovie()?.id\"\r\n            [title]=\"media.title\"\r\n            [media]=\"media\"\r\n          ></media-card>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </media-template>\r\n</home-template>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SearchPage",
            "id": "component-SearchPage-56f0b4de4df70c1eaf9c9d9509baf2f303589504d0bf5aafaa8b130792795f3fae17623a366e5d985c037470eeb138d94061033b83dbd06b0bee40114eb691e8",
            "file": "src/shared/components/pages/search-page/search-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "search-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "genreList",
                    "defaultValue": "new Set<MediaGenre>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "mediaList",
                    "defaultValue": "signal<Media[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addGenreToList",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isGenreActive",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMediaList",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "MediaCardList"
                },
                {
                    "name": "BaseButton"
                },
                {
                    "name": "Icon"
                },
                {
                    "name": "Genre"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  OnInit,\r\n  signal,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { Media } from '../../../types/media';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Movie } from '../../../types/movie';\r\nimport { Series } from '../../../types/series';\r\nimport { MediaCardList } from '../../molecules/media-card-list/media-card-list';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\nimport { Icon } from '../../atoms/icon/icon';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { MediaGenre } from '../../../types/genre';\r\nimport { Genre } from '../../atoms/genre/genre';\r\n\r\n@Component({\r\n  selector: 'search-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HomeTemplate, MediaCardList, BaseButton, Icon, Genre],\r\n  templateUrl: './search-page.html',\r\n  styleUrl: './search-page.scss',\r\n})\r\nexport class SearchPage implements OnInit {\r\n  @ViewChild('input') inputElement!: ElementRef;\r\n\r\n  public mediaList = signal<Media[] | null>(null);\r\n\r\n  private genreList = new Set<MediaGenre>();\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private mediaService: MediaService,\r\n    private mediaRoute: MediaRouterService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const search = this.route.snapshot.paramMap.get('input');\r\n    if (search !== null && search !== '') this.setMediaList(search);\r\n  }\r\n\r\n  public setMediaList(input: string) {\r\n    if (this.checkInput(input)) return;\r\n\r\n    this.mediaService\r\n      .getSearch(input, Array.from(this.genreList.values()))\r\n      .subscribe((response) => {\r\n        const mediaList: Media[] = [];\r\n\r\n        response.data.forEach((element) => {\r\n          const type = element.type;\r\n          if (type === 'Movie') mediaList.push(new Movie(element));\r\n          if (type === 'Series') mediaList.push(new Series(element));\r\n        });\r\n\r\n        this.mediaRoute.openSearch(input);\r\n        this.inputElement.nativeElement.value = input;\r\n        this.mediaList.set(mediaList);\r\n      });\r\n  }\r\n\r\n  checkInput(input: string): boolean {\r\n    if (input === undefined) return true;\r\n    if (input === '') return false;\r\n\r\n    const trimmed = input.trim();\r\n    if (trimmed.indexOf('/') !== -1) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  isGenreActive(genre: string): boolean {\r\n    const genreType = genre as MediaGenre;\r\n    return this.genreList.has(genreType);\r\n  }\r\n\r\n  addGenreToList(genre: string, input: string) {\r\n    const genreType = genre as MediaGenre;\r\n    if (this.isGenreActive(genre)) this.genreList.delete(genreType);\r\n    else this.genreList.add(genreType);\r\n\r\n    this.setMediaList(input);\r\n  }\r\n\r\n  getAllGenres(): string[] {\r\n    return Object.values(MediaGenre);\r\n  }\r\n}\r\n",
            "styleUrl": "./search-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRoute",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRoute",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<home-template [showSearch]=\"false\">\r\n  <div class=\"container\">\r\n    <div class=\"search\">\r\n      <div class=\"search__config\">\r\n        <base-button\r\n          (onClick)=\"this.setMediaList(input.value)\"\r\n          class=\"header__icon\"\r\n        >\r\n          <icon id=\"icon\" iconName=\"search\" alt=\"Search\" />\r\n        </base-button>\r\n\r\n        <input\r\n          (keydown.enter)=\"this.setMediaList(input.value)\"\r\n          class=\"input\"\r\n          type=\"text\"\r\n          #input\r\n          placeholder=\"Search...\"\r\n          maxlength=\"100\"\r\n          autofocus\r\n        />\r\n      </div>\r\n\r\n      <div class=\"genre-group\">\r\n        @for (item of this.getAllGenres(); track $index) {\r\n        <genre\r\n          (onClick)=\"this.addGenreToList($event, input.value)\"\r\n          class=\"hover-effect\"\r\n          [genre]=\"item\"\r\n          [ngClass]=\"{active: this.isGenreActive(item)}\"\r\n        ></genre>\r\n        }\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"search__result\">\r\n      <media-card-list\r\n        class=\"grid\"\r\n        *ngIf=\"this.mediaList !== null\"\r\n        [mediaList]=\"this.mediaList()\"\r\n      ></media-card-list>\r\n    </div>\r\n  </div>\r\n</home-template>\r\n"
        },
        {
            "name": "SeriesOverviewPage",
            "id": "component-SeriesOverviewPage-8d510fd4339ad286d2bc7ce4d7c02d038fa3012de1c2cd2abd71fbac54105e327dc23a28f753f6b3142f84c66fdd08a5ca0862e209dddd930d01fc50ab4b9f61",
            "file": "src/shared/components/pages/series-overview-page/series-overview-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "series-overview-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./series-overview-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "series",
                    "defaultValue": "signal<Series | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "Banner"
                },
                {
                    "name": "EpisodeList"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, signal } from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { Banner } from '../../molecules/banner/banner';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EpisodeList } from '../../molecules/episode-list/episode-list';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { Series } from '../../../types/series';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'series-overview-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HomeTemplate, Banner, EpisodeList],\r\n  templateUrl: './series-overview-page.html',\r\n  styleUrl: './series-overview-page.scss',\r\n})\r\nexport class SeriesOverviewPage implements OnInit {\r\n  public series = signal<Series | null>(null);\r\n\r\n  constructor(\r\n    private mediaService: MediaService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const seriesID = this.route.snapshot.paramMap.get('seriesID');\r\n\r\n    if (!seriesID) return;\r\n\r\n    this.mediaService.getSeries(seriesID).subscribe((response) => {\r\n      this.series.set(new Series(response.data));\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./series-overview-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<home-template [mediaID]=\"this.series()?.id\" [showEditButton]=\"true\">\r\n  <banner\r\n    *ngIf=\"this.series() != null\"\r\n    [media]=\"this.series()\"\r\n    class=\"hide-button\"\r\n    buttonText=\"Watch\"\r\n  ></banner>\r\n\r\n  <div>\r\n    <ng-container\r\n      *ngFor=\"let i of this.series()?.getEpisodeArray(); let seasonIndex = index\"\r\n    >\r\n      <p class=\"season__title\">Season {{i[0].season}}</p>\r\n      <episode-list [episodeList]=\"i\"></episode-list>\r\n    </ng-container>\r\n  </div>\r\n</home-template>\r\n"
        },
        {
            "name": "SeriesPage",
            "id": "component-SeriesPage-f88448fef0adf82406a1e75c180c502dcc100da57c2251fb5d1063509ea8292f26c394332d834c95b6524817471312d83462cfd8df9368d005300375bc04ec60",
            "file": "src/shared/components/pages/series-page/series-page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "series-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./series-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentEpisode",
                    "defaultValue": "signal<Episode | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "currentSeason",
                    "defaultValue": "signal<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "currentSeries",
                    "defaultValue": "signal<Series | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dropdownContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "mediaService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "eventName",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEpisodeList",
                    "args": [],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIndexOfEpisode",
                    "args": [
                        {
                            "name": "episode",
                            "type": "Episode | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "episode",
                            "type": "Episode | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVideoSource",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hideDropdownContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToAdjacentEpisode",
                    "args": [
                        {
                            "name": "increment",
                            "type": "\"1\" | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "increment",
                            "type": "\"1\" | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentEpisode",
                    "args": [
                        {
                            "name": "episode",
                            "type": "Episode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "episode",
                            "type": "Episode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSeason",
                    "args": [
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDropdownContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchDropdownContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 176
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "OnClickOutsideDirective",
                    "type": "directive"
                },
                {
                    "name": "HomeTemplate"
                },
                {
                    "name": "MediaTemplate"
                },
                {
                    "name": "EpisodeList"
                },
                {
                    "name": "BaseButton"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  OnInit,\r\n  signal,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { HomeTemplate } from '../../templates/home-template/home-template';\r\nimport { MediaTemplate } from '../../templates/media-template/media-template';\r\nimport { EpisodeList } from '../../molecules/episode-list/episode-list';\r\nimport { Series } from '../../../types/series';\r\nimport { Episode } from '../../../types/seriesEpisode';\r\nimport { BaseButton } from '../../atoms/base-button/base-button';\r\nimport { OnClickOutsideDirective } from '../../../directives/on-click-outside.directive';\r\nimport { MediaService } from '../../../services/media.service';\r\nimport { MediaRouterService } from '../../../services/media-router.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CurrentMediaRoutes } from '../../../../utils/apiRoutes';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'series-page',\r\n  standalone: true,\r\n  imports: [\r\n    OnClickOutsideDirective,\r\n    HomeTemplate,\r\n    MediaTemplate,\r\n    EpisodeList,\r\n    BaseButton,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './series-page.html',\r\n  styleUrl: './series-page.scss',\r\n})\r\nexport class SeriesPage implements OnInit {\r\n  @ViewChild('dropdownContent') dropdownContent!: ElementRef;\r\n\r\n  currentEpisode = signal<Episode | null>(null);\r\n  currentSeason = signal<number>(0);\r\n  currentSeries = signal<Series | null>(null);\r\n\r\n  constructor(\r\n    public mediaService: MediaService,\r\n    private mediaRouterService: MediaRouterService,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    console.log('Constructor Init');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe((params) => {\r\n      const seriesID = params['seriesID'];\r\n      const episodeID = params['episodeID'];\r\n\r\n      if (seriesID == null || episodeID == null)\r\n        throw new Error('No ID specified');\r\n\r\n      this.mediaService.getSeries(seriesID).subscribe((response) => {\r\n        this.currentSeries.set(new Series(response.data));\r\n\r\n        const episode = this.currentSeries()?.episodeList.find(\r\n          (episode) => episode.id == episodeID\r\n        );\r\n\r\n        if (episode) {\r\n          this.currentEpisode.set(episode);\r\n          this.currentSeason.set(episode.season);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  getStatus(): string {\r\n    if (this.currentSeries()?.isComplete) return 'Complete';\r\n    else return 'on-going';\r\n  }\r\n\r\n  showDropdownContent() {\r\n    if (this.dropdownContent === undefined) return;\r\n    this.dropdownContent.nativeElement.style.visibility = 'visible';\r\n  }\r\n\r\n  hideDropdownContent() {\r\n    if (this.dropdownContent === undefined) return;\r\n    this.dropdownContent.nativeElement.style.visibility = 'hidden';\r\n  }\r\n\r\n  switchDropdownContent() {\r\n    if (this.dropdownContent === undefined) return;\r\n\r\n    if (this.dropdownContent.nativeElement.style.visibility == 'hidden')\r\n      this.showDropdownContent();\r\n    else this.hideDropdownContent();\r\n  }\r\n\r\n  getEpisodeList(): Episode[] | null {\r\n    const series = this.currentSeries();\r\n\r\n    if (series == null) return null;\r\n\r\n    return series.getEpisodeArray()[this.currentSeason() - 1];\r\n  }\r\n\r\n  setSeason(season: number) {\r\n    if (this.currentSeason() == season) return;\r\n\r\n    this.currentSeason.set(season);\r\n\r\n    const episode = this.currentSeries()?.getFirstEpisodeOfSeason(season);\r\n    if (episode) {\r\n      const id = this.currentSeries()?.id;\r\n\r\n      if (!id) throw new Error('ID is undefined');\r\n\r\n      this.currentEpisode.set(episode);\r\n      this.mediaRouterService.openSeriesPlayer(id, episode?.id);\r\n    }\r\n\r\n    this.hideDropdownContent();\r\n  }\r\n\r\n  navigateToAdjacentEpisode(increment: 1 | -1) {\r\n    const episodeList = this.currentSeries()?.episodeList;\r\n    const index = this.getIndexOfEpisode(this.currentEpisode());\r\n\r\n    if (episodeList === undefined) throw new Error('Episode List is undefined');\r\n\r\n    if (increment == -1 && index + increment < 0)\r\n      throw new Error('No Episode before the current one');\r\n\r\n    if (increment == 1 && index + increment >= episodeList.length)\r\n      throw new Error('No Episode after the current one');\r\n\r\n    const episode = episodeList[index + increment];\r\n\r\n    this.currentEpisode.set(episode);\r\n    this.currentSeason.set(episode.season);\r\n\r\n    const id = this.currentSeries()?.id;\r\n    if (!id) throw new Error('ID is undefined');\r\n\r\n    this.mediaRouterService.openSeriesPlayer(id, episode.id);\r\n  }\r\n\r\n  private getIndexOfEpisode(episode: Episode | null): number {\r\n    const index = this.currentSeries()?.episodeList.findIndex((val) => {\r\n      return val.id == episode?.id;\r\n    });\r\n\r\n    if (index === undefined) {\r\n      console.error('The Episode was not found ', this.currentEpisode());\r\n      throw new Error('The Episode was not found');\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  public setCurrentEpisode(episode: Episode) {\r\n    console.log('Episode:', episode);\r\n\r\n    this.currentEpisode.set(episode);\r\n    this.currentSeason.set(episode.season);\r\n  }\r\n\r\n  public getVideoSource(): string {\r\n    const episodeID = this.route.snapshot.paramMap.get('episodeID');\r\n    console.log('Source', episodeID);\r\n\r\n    if (!episodeID) return '';\r\n\r\n    return CurrentMediaRoutes.GET_VIDEO(episodeID);\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  eventName(event: KeyboardEvent) {\r\n    const key = event.key;\r\n\r\n    if ((event.ctrlKey || event.metaKey) && key === 'ArrowLeft') {\r\n      event.preventDefault();\r\n      this.navigateToAdjacentEpisode(-1);\r\n    }\r\n\r\n    if ((event.ctrlKey || event.metaKey) && key === 'ArrowRight') {\r\n      event.preventDefault();\r\n      this.navigateToAdjacentEpisode(1);\r\n    }\r\n\r\n    switch (key) {\r\n      case 'MediaTrackNext':\r\n        this.navigateToAdjacentEpisode(1);\r\n        break;\r\n\r\n      case 'MediaTrackPrevious':\r\n        this.navigateToAdjacentEpisode(-1);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./series-page.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "mediaService",
                        "type": "MediaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaRouterService",
                        "type": "MediaRouterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<home-template [mediaID]=\"this.currentEpisode()?.id\" [showEditButton]=\"true\">\r\n  <media-template\r\n    *ngIf=\"this.currentEpisode() != null\"\r\n    [media]=\"this.currentEpisode()\"\r\n    [videoSource]=\"this.getVideoSource()\"\r\n    class=\"full-width\"\r\n  >\r\n    <div class=\"title\" header>\r\n      <p class=\"title__series\">{{this.currentSeries()?.title}}</p>\r\n      <p class=\"title__episode-season-info\">\r\n        Season {{this.currentSeason()}} Episode\r\n        {{this.currentEpisode()?.episode}}\r\n      </p>\r\n      <p class=\"title__episode-title\">{{this.currentEpisode()?.title}}</p>\r\n    </div>\r\n\r\n    <div info>\r\n      <div class=\"episode-next-prev\">\r\n        <base-button\r\n          (onClick)=\"navigateToAdjacentEpisode(-1)\"\r\n          class=\"dropdown__button width--150\"\r\n        >\r\n          <p>Previous Episode</p>\r\n        </base-button>\r\n        <base-button\r\n          (onClick)=\"navigateToAdjacentEpisode(1)\"\r\n          class=\"dropdown__button width--150\"\r\n        >\r\n          <p>Next Episode</p>\r\n        </base-button>\r\n      </div>\r\n\r\n      <div class=\"season-selection\">\r\n        <div\r\n          (onClickOutside)=\"this.hideDropdownContent()\"\r\n          class=\"season-selection__button\"\r\n        >\r\n          <base-button\r\n            (onClick)=\"this.switchDropdownContent()\"\r\n            class=\"dropdown__button width--300\"\r\n          >\r\n            <div style=\"display: flex\">\r\n              <p>Season</p>\r\n              <p style=\"margin-left: auto\">{{this.currentSeason()}}</p>\r\n            </div>\r\n          </base-button>\r\n\r\n          <div\r\n            style=\"visibility: hidden\"\r\n            #dropdownContent\r\n            class=\"dropdown__content\"\r\n          >\r\n            @for (season of this.currentSeries()?.getSeasons(); track $index) {\r\n            <base-button\r\n              (onClick)=\"this.setSeason(season)\"\r\n              class=\"dropdown__list__button season-selection__button\"\r\n            >\r\n              <div style=\"display: flex\">\r\n                <p>Season</p>\r\n                <p style=\"margin-left: auto\">{{season}}</p>\r\n              </div>\r\n            </base-button>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"status\">\r\n        <p>Status</p>\r\n        <p>{{getStatus()}}</p>\r\n      </div>\r\n      <div\r\n        class=\"description\"\r\n        *ngIf=\"this.currentEpisode()?.description !== null && this.currentEpisode()?.description !== ''\"\r\n      >\r\n        <p>{{this.currentEpisode()?.description}}</p>\r\n      </div>\r\n\r\n      <div class=\"episode-selection\">\r\n        <episode-list\r\n          (onClickCard)=\"setCurrentEpisode($event)\"\r\n          [episodeList]=\"this.getEpisodeList()\"\r\n        ></episode-list>\r\n      </div>\r\n    </div>\r\n  </media-template>\r\n</home-template>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(\r\n      routes,\r\n      withInMemoryScrolling({ scrollPositionRestoration: 'enabled' })\r\n    ),\r\n    provideHttpClient(),\r\n  ],\r\n}"
            },
            {
                "name": "BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://localhost:8000/api'"
            },
            {
                "name": "CurrentMediaRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  CURRENT_MEDIA: `${BASE_URL}/current_media/get`,\r\n  SET_CURRENT_MEDIA: `${BASE_URL}/current_media/`,\r\n  GET_VIDEO: (media_id: string) =>\r\n    `${BASE_URL}/current_media/video/${media_id}`,\r\n}"
            },
            {
                "name": "EpisodeRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  Episodes: (seriesID: string) => `${BASE_URL}/episode?series_id=${seriesID}`,\r\n  Episode: (episodeID: string) => `${BASE_URL}/episodes/${episodeID}/episode`,\r\n\r\n  THUMBNAIL: (episodeID: string) =>\r\n    `${BASE_URL}/episodes/${episodeID}/thumbnail`,\r\n  PERCENT_WATCHED: (episodeID: string) =>\r\n    `${BASE_URL}/episodes/${episodeID}/percent_watched`,\r\n}"
            },
            {
                "name": "episodeTitles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n  'The Beginning',\r\n  'A New Dawn',\r\n  'Shadows Rising',\r\n  'The Lost Artifact',\r\n  'Echoes of the Past',\r\n  'The Reckoning',\r\n  'Into the Abyss',\r\n  'The Final Stand',\r\n  'Whispers in the Dark',\r\n  'The Betrayal',\r\n  'The Forgotten Realm',\r\n  'Rise of the Phoenix',\r\n  'The Silent Watcher',\r\n  'The Crimson Tide',\r\n  'The Shattered Crown',\r\n  'The Eternal Flame',\r\n  'The Hidden Truth',\r\n  'The Last Hope',\r\n  'The Iron Fortress',\r\n  'The Frozen Wasteland',\r\n  'The Golden Compass',\r\n  'The Dark Prophecy',\r\n  'The Mystic Forest',\r\n  'The Celestial Gate',\r\n  'The Endless Journey',\r\n  'The Fallen Star',\r\n  'The Secret Alliance',\r\n  'The Storm Within',\r\n  'The Vanishing Point',\r\n  'The Final Hour',\r\n]"
            },
            {
                "name": "getMedia",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isSeries: boolean = false): Media => {\r\n  if (!isSeries) {\r\n    const title = movieTitles[getRandomInt(0, movieTitles.length - 1)];\r\n\r\n    return new Movie({\r\n      id: crypto.randomUUID().toString(),\r\n      title: title,\r\n      description:\r\n        'A computer hacker learns about the true nature of his reality and his role in the war against its controllers.',\r\n      genreList: getRandomGenres(),\r\n      rating: 87,\r\n      duration: 144,\r\n      pathMedia: 'This is the path',\r\n      isComplete: true,\r\n    });\r\n  }\r\n\r\n  const title = movieTitles[getRandomInt(0, movieTitles.length - 1)];\r\n\r\n  return new Series({\r\n    id: crypto.randomUUID().toString(),\r\n    title: title,\r\n    description:\r\n      'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.',\r\n    genreList: getRandomGenres(),\r\n    rating: 90,\r\n    isComplete: false,\r\n    episodeList: getRandomEpisodes(4, 5, 20),\r\n  });\r\n}"
            },
            {
                "name": "getMediaList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  length: number = 1,\r\n  isSeries: boolean = false\r\n): Media[] => {\r\n  const list = [];\r\n\r\n  for (let index = 0; index < length; index++) {\r\n    list.push(getMedia(isSeries));\r\n  }\r\n\r\n  return list;\r\n}"
            },
            {
                "name": "getMovie",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): Media => {\r\n  return getMedia();\r\n}"
            },
            {
                "name": "getMovieList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(length: number): Media[] => {\r\n  return getMediaList(length);\r\n}"
            },
            {
                "name": "getRandomEpisodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  seasons: number,\r\n  episodesMin: number,\r\n  episodesMax: number\r\n): Episode[] => {\r\n  const episodes: Episode[] = [];\r\n\r\n  for (let i = 0; i < seasons; i++) {\r\n    for (let j = 0; j < getRandomInt(episodesMin, episodesMax); j++) {\r\n      const episodeName =\r\n        episodeTitles[getRandomInt(0, episodeTitles.length - 1)];\r\n      episodes.push(\r\n        new Episode({\r\n          id: crypto.randomUUID().toString(),\r\n          episode: j + 1,\r\n          season: i + 1,\r\n          title: episodeName,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  return episodes;\r\n}"
            },
            {
                "name": "getRandomGenres",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): MediaGenre[] => {\r\n  const genres = Object.values(MediaGenre);\r\n  const randomGenres: MediaGenre[] = [];\r\n\r\n  const numberOfGenres = getRandomInt(1, genres.length);\r\n\r\n  for (let i = 0; i < numberOfGenres; i++) {\r\n    const randomGenre = genres[getRandomInt(0, genres.length - 1)];\r\n    if (!randomGenres.includes(randomGenre)) {\r\n      randomGenres.push(randomGenre);\r\n    }\r\n  }\r\n\r\n  return randomGenres;\r\n}"
            },
            {
                "name": "getRandomInt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(min: number, max: number): number => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}"
            },
            {
                "name": "getSeries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): Series => {\r\n  return getMedia(true) as Series;\r\n}"
            },
            {
                "name": "getSeriesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(length: number = 1): Media[] => {\r\n  return getMediaList(length, true);\r\n}"
            },
            {
                "name": "MediaRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  MEDIA: (mediaID: string) => `${BASE_URL}/media/get/${mediaID}`,\r\n  HIGHEST_RATED: (limit: number) =>\r\n    `${BASE_URL}/media/highest_rated?limit=${limit}`,\r\n  RANDOM_MEDIA_LIST: (limit: number) =>\r\n    `${BASE_URL}/media/random_media/${limit}`,\r\n  SEARCH: (input: string) => `${BASE_URL}/media/search/${input}`,\r\n  SET_TIME_WATCHED: (mediaID: string, timeInSeconds: number) =>\r\n    `${BASE_URL}/media/${mediaID}/time?time_in_seconds=${timeInSeconds}`,\r\n  GET_TIME_WATCHED: (mediaID: string) =>\r\n    `${BASE_URL}/media/${mediaID}/time_watched`,\r\n  PUT_DATA: (mediaID: string) => `${BASE_URL}/media/${mediaID}/data`,\r\n}"
            },
            {
                "name": "MovieRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  MOVIES: `${BASE_URL}/movies`,\r\n  MOVIE: (movieID: string) => `${BASE_URL}/movies/${movieID}/movie`,\r\n\r\n  THUMBNAIL: (movieID: string) => `${BASE_URL}/movies/${movieID}/thumbnail`,\r\n  PERCENT_WATCHED: (movieID: string) =>\r\n    `${BASE_URL}/movies/${movieID}/percent_watched`,\r\n  HIGHEST_RATED: (limit: number) => `${BASE_URL}/movies/highest_rated/${limit}`,\r\n  RANDOM: (limit: number) => `${BASE_URL}/movies/random/${limit}`,\r\n  GET_SIMILAR_MOVIES: (movieID: string) =>\r\n    `${BASE_URL}/movies/${movieID}/similar`,\r\n}"
            },
            {
                "name": "movieTitles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n  'The Matrix',\r\n  'Inception',\r\n  'Interstellar',\r\n  'The Dark Knight',\r\n  'Pulp Fiction',\r\n  'The Shawshank Redemption',\r\n  'Fight Club',\r\n  'Forrest Gump',\r\n  'The Godfather',\r\n  'The Lord of the Rings',\r\n  'The Empire Strikes Back',\r\n  'The Avengers',\r\n  'Jurassic Park',\r\n  'The Lion King',\r\n  'Titanic',\r\n  'Gladiator',\r\n  'The Silence of the Lambs',\r\n  \"Schindler's List\",\r\n  'The Departed',\r\n  'The Prestige',\r\n  'The Social Network',\r\n  'The Grand Budapest Hotel',\r\n  'Mad Max: Fury Road',\r\n  'The Revenant',\r\n  'The Wolf of Wall Street',\r\n  'Django Unchained',\r\n  'The Hateful Eight',\r\n  'The Irishman',\r\n  'Parasite',\r\n  'Everything Everywhere All At Once',\r\n]"
            },
            {
                "name": "SeriesRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  SERIES_ALL: `${BASE_URL}/series`,\r\n  SERIES: (seriesID: string) => `${BASE_URL}/series/${seriesID}/series`,\r\n\r\n  THUMBNAIL: (seriesID: string) => `${BASE_URL}/series/${seriesID}/thumbnail`,\r\n  PERCENT_WATCHED: (seriesID: string) =>\r\n    `${BASE_URL}/series/${seriesID}/percent_watched`,\r\n  HIGHEST_RATED: (limit: number) => `${BASE_URL}/series/highest_rated/${limit}`,\r\n  RANDOM: (limit: number) => `${BASE_URL}/series/random/${limit}`,\r\n}"
            },
            {
                "name": "WatchHistoryRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/apiRoutes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  GET_HISTORY: (limit: number) => `${BASE_URL}/watch_history/${limit}`,\r\n  ADD_HISTORY_ITEM: (id: string, type: string) =>\r\n    `${BASE_URL}/watch_history/add/${id}?media_type=${type}`,\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "BackendResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/shared/types/response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "LibraryListType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"series\" | \"movies\" | \"recWatched\" | \"highRated\" | \"moviesSeries\"",
                "file": "src/shared/types/libraryListType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "MediaGenre",
                "childs": [
                    {
                        "name": "ACTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Action"
                    },
                    {
                        "name": "ADVENTURE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Adventure"
                    },
                    {
                        "name": "ANIMATION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Animation"
                    },
                    {
                        "name": "COMEDY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Comedy"
                    },
                    {
                        "name": "CRIME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Crime"
                    },
                    {
                        "name": "DRAMA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Drama"
                    },
                    {
                        "name": "FANTASY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Fantasy"
                    },
                    {
                        "name": "HISTORICAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Historical"
                    },
                    {
                        "name": "HORROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Horror"
                    },
                    {
                        "name": "ROMANCE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Romance"
                    },
                    {
                        "name": "SCIFI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Science-Fiction"
                    },
                    {
                        "name": "THRILLER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Thriller"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/shared/types/genre.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(\r\n      routes,\r\n      withInMemoryScrolling({ scrollPositionRestoration: 'enabled' })\r\n    ),\r\n    provideHttpClient(),\r\n  ],\r\n}"
                }
            ],
            "src/utils/apiRoutes.ts": [
                {
                    "name": "BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://localhost:8000/api'"
                },
                {
                    "name": "CurrentMediaRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  CURRENT_MEDIA: `${BASE_URL}/current_media/get`,\r\n  SET_CURRENT_MEDIA: `${BASE_URL}/current_media/`,\r\n  GET_VIDEO: (media_id: string) =>\r\n    `${BASE_URL}/current_media/video/${media_id}`,\r\n}"
                },
                {
                    "name": "EpisodeRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  Episodes: (seriesID: string) => `${BASE_URL}/episode?series_id=${seriesID}`,\r\n  Episode: (episodeID: string) => `${BASE_URL}/episodes/${episodeID}/episode`,\r\n\r\n  THUMBNAIL: (episodeID: string) =>\r\n    `${BASE_URL}/episodes/${episodeID}/thumbnail`,\r\n  PERCENT_WATCHED: (episodeID: string) =>\r\n    `${BASE_URL}/episodes/${episodeID}/percent_watched`,\r\n}"
                },
                {
                    "name": "MediaRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  MEDIA: (mediaID: string) => `${BASE_URL}/media/get/${mediaID}`,\r\n  HIGHEST_RATED: (limit: number) =>\r\n    `${BASE_URL}/media/highest_rated?limit=${limit}`,\r\n  RANDOM_MEDIA_LIST: (limit: number) =>\r\n    `${BASE_URL}/media/random_media/${limit}`,\r\n  SEARCH: (input: string) => `${BASE_URL}/media/search/${input}`,\r\n  SET_TIME_WATCHED: (mediaID: string, timeInSeconds: number) =>\r\n    `${BASE_URL}/media/${mediaID}/time?time_in_seconds=${timeInSeconds}`,\r\n  GET_TIME_WATCHED: (mediaID: string) =>\r\n    `${BASE_URL}/media/${mediaID}/time_watched`,\r\n  PUT_DATA: (mediaID: string) => `${BASE_URL}/media/${mediaID}/data`,\r\n}"
                },
                {
                    "name": "MovieRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  MOVIES: `${BASE_URL}/movies`,\r\n  MOVIE: (movieID: string) => `${BASE_URL}/movies/${movieID}/movie`,\r\n\r\n  THUMBNAIL: (movieID: string) => `${BASE_URL}/movies/${movieID}/thumbnail`,\r\n  PERCENT_WATCHED: (movieID: string) =>\r\n    `${BASE_URL}/movies/${movieID}/percent_watched`,\r\n  HIGHEST_RATED: (limit: number) => `${BASE_URL}/movies/highest_rated/${limit}`,\r\n  RANDOM: (limit: number) => `${BASE_URL}/movies/random/${limit}`,\r\n  GET_SIMILAR_MOVIES: (movieID: string) =>\r\n    `${BASE_URL}/movies/${movieID}/similar`,\r\n}"
                },
                {
                    "name": "SeriesRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  SERIES_ALL: `${BASE_URL}/series`,\r\n  SERIES: (seriesID: string) => `${BASE_URL}/series/${seriesID}/series`,\r\n\r\n  THUMBNAIL: (seriesID: string) => `${BASE_URL}/series/${seriesID}/thumbnail`,\r\n  PERCENT_WATCHED: (seriesID: string) =>\r\n    `${BASE_URL}/series/${seriesID}/percent_watched`,\r\n  HIGHEST_RATED: (limit: number) => `${BASE_URL}/series/highest_rated/${limit}`,\r\n  RANDOM: (limit: number) => `${BASE_URL}/series/random/${limit}`,\r\n}"
                },
                {
                    "name": "WatchHistoryRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/apiRoutes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  GET_HISTORY: (limit: number) => `${BASE_URL}/watch_history/${limit}`,\r\n  ADD_HISTORY_ITEM: (id: string, type: string) =>\r\n    `${BASE_URL}/watch_history/add/${id}?media_type=${type}`,\r\n}"
                }
            ],
            "src/utils/utils.ts": [
                {
                    "name": "episodeTitles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n  'The Beginning',\r\n  'A New Dawn',\r\n  'Shadows Rising',\r\n  'The Lost Artifact',\r\n  'Echoes of the Past',\r\n  'The Reckoning',\r\n  'Into the Abyss',\r\n  'The Final Stand',\r\n  'Whispers in the Dark',\r\n  'The Betrayal',\r\n  'The Forgotten Realm',\r\n  'Rise of the Phoenix',\r\n  'The Silent Watcher',\r\n  'The Crimson Tide',\r\n  'The Shattered Crown',\r\n  'The Eternal Flame',\r\n  'The Hidden Truth',\r\n  'The Last Hope',\r\n  'The Iron Fortress',\r\n  'The Frozen Wasteland',\r\n  'The Golden Compass',\r\n  'The Dark Prophecy',\r\n  'The Mystic Forest',\r\n  'The Celestial Gate',\r\n  'The Endless Journey',\r\n  'The Fallen Star',\r\n  'The Secret Alliance',\r\n  'The Storm Within',\r\n  'The Vanishing Point',\r\n  'The Final Hour',\r\n]"
                },
                {
                    "name": "getMedia",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isSeries: boolean = false): Media => {\r\n  if (!isSeries) {\r\n    const title = movieTitles[getRandomInt(0, movieTitles.length - 1)];\r\n\r\n    return new Movie({\r\n      id: crypto.randomUUID().toString(),\r\n      title: title,\r\n      description:\r\n        'A computer hacker learns about the true nature of his reality and his role in the war against its controllers.',\r\n      genreList: getRandomGenres(),\r\n      rating: 87,\r\n      duration: 144,\r\n      pathMedia: 'This is the path',\r\n      isComplete: true,\r\n    });\r\n  }\r\n\r\n  const title = movieTitles[getRandomInt(0, movieTitles.length - 1)];\r\n\r\n  return new Series({\r\n    id: crypto.randomUUID().toString(),\r\n    title: title,\r\n    description:\r\n      'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.',\r\n    genreList: getRandomGenres(),\r\n    rating: 90,\r\n    isComplete: false,\r\n    episodeList: getRandomEpisodes(4, 5, 20),\r\n  });\r\n}"
                },
                {
                    "name": "getMediaList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  length: number = 1,\r\n  isSeries: boolean = false\r\n): Media[] => {\r\n  const list = [];\r\n\r\n  for (let index = 0; index < length; index++) {\r\n    list.push(getMedia(isSeries));\r\n  }\r\n\r\n  return list;\r\n}"
                },
                {
                    "name": "getMovie",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): Media => {\r\n  return getMedia();\r\n}"
                },
                {
                    "name": "getMovieList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(length: number): Media[] => {\r\n  return getMediaList(length);\r\n}"
                },
                {
                    "name": "getRandomEpisodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  seasons: number,\r\n  episodesMin: number,\r\n  episodesMax: number\r\n): Episode[] => {\r\n  const episodes: Episode[] = [];\r\n\r\n  for (let i = 0; i < seasons; i++) {\r\n    for (let j = 0; j < getRandomInt(episodesMin, episodesMax); j++) {\r\n      const episodeName =\r\n        episodeTitles[getRandomInt(0, episodeTitles.length - 1)];\r\n      episodes.push(\r\n        new Episode({\r\n          id: crypto.randomUUID().toString(),\r\n          episode: j + 1,\r\n          season: i + 1,\r\n          title: episodeName,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  return episodes;\r\n}"
                },
                {
                    "name": "getRandomGenres",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): MediaGenre[] => {\r\n  const genres = Object.values(MediaGenre);\r\n  const randomGenres: MediaGenre[] = [];\r\n\r\n  const numberOfGenres = getRandomInt(1, genres.length);\r\n\r\n  for (let i = 0; i < numberOfGenres; i++) {\r\n    const randomGenre = genres[getRandomInt(0, genres.length - 1)];\r\n    if (!randomGenres.includes(randomGenre)) {\r\n      randomGenres.push(randomGenre);\r\n    }\r\n  }\r\n\r\n  return randomGenres;\r\n}"
                },
                {
                    "name": "getRandomInt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(min: number, max: number): number => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}"
                },
                {
                    "name": "getSeries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): Series => {\r\n  return getMedia(true) as Series;\r\n}"
                },
                {
                    "name": "getSeriesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(length: number = 1): Media[] => {\r\n  return getMediaList(length, true);\r\n}"
                },
                {
                    "name": "movieTitles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n  'The Matrix',\r\n  'Inception',\r\n  'Interstellar',\r\n  'The Dark Knight',\r\n  'Pulp Fiction',\r\n  'The Shawshank Redemption',\r\n  'Fight Club',\r\n  'Forrest Gump',\r\n  'The Godfather',\r\n  'The Lord of the Rings',\r\n  'The Empire Strikes Back',\r\n  'The Avengers',\r\n  'Jurassic Park',\r\n  'The Lion King',\r\n  'Titanic',\r\n  'Gladiator',\r\n  'The Silence of the Lambs',\r\n  \"Schindler's List\",\r\n  'The Departed',\r\n  'The Prestige',\r\n  'The Social Network',\r\n  'The Grand Budapest Hotel',\r\n  'Mad Max: Fury Road',\r\n  'The Revenant',\r\n  'The Wolf of Wall Street',\r\n  'Django Unchained',\r\n  'The Hateful Eight',\r\n  'The Irishman',\r\n  'Parasite',\r\n  'Everything Everywhere All At Once',\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/shared/types/genre.ts": [
                {
                    "name": "MediaGenre",
                    "childs": [
                        {
                            "name": "ACTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Action"
                        },
                        {
                            "name": "ADVENTURE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Adventure"
                        },
                        {
                            "name": "ANIMATION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Animation"
                        },
                        {
                            "name": "COMEDY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Comedy"
                        },
                        {
                            "name": "CRIME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Crime"
                        },
                        {
                            "name": "DRAMA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Drama"
                        },
                        {
                            "name": "FANTASY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Fantasy"
                        },
                        {
                            "name": "HISTORICAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Historical"
                        },
                        {
                            "name": "HORROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Horror"
                        },
                        {
                            "name": "ROMANCE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Romance"
                        },
                        {
                            "name": "SCIFI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Science-Fiction"
                        },
                        {
                            "name": "THRILLER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Thriller"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/shared/types/genre.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/shared/types/response.ts": [
                {
                    "name": "BackendResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/shared/types/response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/shared/types/libraryListType.ts": [
                {
                    "name": "LibraryListType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"series\" | \"movies\" | \"recWatched\" | \"highRated\" | \"moviesSeries\"",
                    "file": "src/shared/types/libraryListType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/atoms/base-button/base-button.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseButton",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/atoms/episode-card/episode-card.ts",
                "type": "component",
                "linktype": "component",
                "name": "EpisodeCard",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/atoms/genre/genre.ts",
                "type": "component",
                "linktype": "component",
                "name": "Genre",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/atoms/icon/icon.ts",
                "type": "component",
                "linktype": "component",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/atoms/media-card/media-card.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaCard",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/molecules/banner/banner.ts",
                "type": "component",
                "linktype": "component",
                "name": "Banner",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/molecules/episode-list/episode-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "EpisodeList",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/molecules/genre-list/genre-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/molecules/media-card-list/media-card-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaCardList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/organisms/header-bar/header-bar.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderBar",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/edit-page/edit-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditPage",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/home-page/home-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePage",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/media-library/media-library.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaLibrary",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/media-page/media-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/movie-page/movie-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "MoviePage",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/search-page/search-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchPage",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/series-overview-page/series-overview-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesOverviewPage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/pages/series-page/series-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesPage",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/templates/home-template/home-template.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/templates/media-template/media-template.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/shared/directives/on-click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OnClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/media-router.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MediaRouterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/media.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MediaService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/APIMethodService.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpRequestHandler",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/currentMedia.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CurrentMedia",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/libraryListType.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LibraryListType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/media.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Media",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/movie.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Movie",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/response.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BackendResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/series.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/seriesEpisode.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Episode",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/shared/types/watchHistory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WatchHistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CurrentMediaRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EpisodeRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MovieRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SeriesRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/apiRoutes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WatchHistoryRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "episodeTitles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMedia",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMediaList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMovie",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMovieList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomEpisodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomGenres",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomInt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSeries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSeriesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "movieTitles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}